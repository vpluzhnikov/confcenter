#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG         
# This is an automatically generated prolog.  
#                            
# $Source: aix710 bos/usr/lib/security/ice/scripts/ipsecallowports.sh 1$                         
#                                                           
# COPYRIGHT International Business Machines Corp. 2010,2010              
#                                                                      
# Pvalue: p2 
#Licensed Materials - Property of IBM
#
#Restricted Materials of IBM
#
#US Government Users Restricted Rights - Use, duplication or
#disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Origin: 27
#
# sccsid: $Header: @(#) AIX710_area/1 bos/usr/lib/security/ice/scripts/ipsecallowports.sh, libice, aix710, _BASELINE_, 2010-05-18T13:56:45-05:00$
#
# IBM_PROLOG_END_TAG
#     COMPONENT_NAME:  (ICE)  ipsecallowports.sh
#     FUNCTIONS:   None
#     ORIGINS:     27
#
#     Syntax:
#           ipsecallowports.sh -{c|e|p}[v] <lname> <value> 
#
#     Parameters:
#           -c		-  Check mode
#	    -e		-  Enforce mode
#	    -p		-  Preview mode
#	    -v		-  verbose mode
#	    lname      	-  ice_name 
#           value 	-  A range or set of ports
#
#
#     Output:
#	    0		-  success
#	    1		-  check/enforce failure
#	    2		-  usage error
#
#     Description:
#           This script allows inbound/outbound traffic for only a range or set of ports, and
#           denies network traffic for all other ports (i.e., below 1024 and above 1024). 
#	    This script should be run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH


#######
#Print Usage
#######
Usage()  {
      print "usage: \n
   ipsecallowports -{c|e|p}[v] rulename ports_to_allow\n"
      print "example: \n
   ipsecallowports -e ipsecallowports_hls \"21-24\""
}

#######
#Process arguments
#######

#check mode
cflag=0
#Enforce mode
eflag=0
#Preview mode
pflag=0
#Verbose mode
vflag=0

while getopts :cevp OPT
do
	case $OPT in
		c)	cflag=1;;
		e)	eflag=1;;
		v)	vflag=1;;
		p)	pflag=1;;
		?|:)	Usage
			exit 2;;
	esac
done

shift $(($OPTIND -1))

#Need 2 arguments
if [ $# -ne 2 ]
then
	Usage	
	exit 1
fi

# Preview mode set-up
if [[ pflag -eq 1 ]];
then
	ECHOPREFIX="echo"
else
	ECHOPREFIX=""
fi

# -c, -e and -p mutually exclusive
((chkflg=cflag+eflag+pflag))
if [[ chkflg -ne 1 ]];
then
        Usage
        exit 2
fi

###
#Output from Script to the Native Library
###
Script_Output() {
        print -n "$cur_val%$ice_status%"
        cat log_msg
        print
}

###
#Initialize the Script Output variables
###
cur_val=0
ice_status=0
print -n > log_msg 2>&1


TMP=/usr/ice/tmp/ipsecallowports
PID=$$
PREREQ=/usr/ice/scripts/chkprereq

#$ECHOPREFIX $PREREQ \
#"bos.rte.ILS,bos.rte.date,bos.rte.shell,\
#bos.rte.commands,bos.net.ipsec.keymgt,\
#bos.net.ipsec.rte,bos.net.tcp.client,prereqipsec"

#if [ $? -ne 0 ]
#then
	#print "prereq missing... \n" >> log_msg 2>&1
	#ice_status=1
        #Script_Output
	#exit 1
#fi

# Determine whether IPSec is enabled or not.
ipv4=`lsdev -Cc ipsec|grep ipsec_v4|awk '{print $2}'`
ipv6=`lsdev -Cc ipsec|grep ipsec_v6|awk '{print $2}'`

#checking
if [[ cflag -eq 1 ]];
then
        if [ "$ipv4" != "Available" ] && [ "$ipv6" != "Available" ]
        then
                print "ipsecallowhosts: Failed to turn on IPSec\n" >> log_msg 2>&1
		cur_val=1
		ice_status=2
		Script_Output
        elif [ "$ipv4" = "Available" ]
        then
                spv4=`lsfilt -v4 -O|awk -v x="ICE:IPv4:ipsecallowports" -F "|" '{print $22}' | egrep ICE:IPv4:ipsecallowports`
                if [ $? -ne 0 ] && [ -z "$spv4" ]
                then
                        print "ipsecallowhosts: IPSec ICE:IPv4:ipsecallowports rules\
 are not turned on\n" >> log_msg 2>&1
			cur_val=1
			ice_status=2
			Script_Output
		else
			cur_val=0
                        ice_status=0
                        Script_Output
                fi
        else
                spv6=`lsfilt -v6 -O -a|awk -v x="ICE:IPv4:ipsecallowports" -F "|" '{print $22}' | egrep ICE:IPv4:ipsecallowports`
                if [ $? -ne 0 ] && [ -z "$spv6" ]
                then
                        print "ipsecallowhosts: IPSec ICE:IPv4:ipsecallowports rules\
 are not turned on\n" >> log_msg 2>&1
			cur_val=1
                        ice_status=2
                        Script_Output
		else
			cur_val=0
                        ice_status=0
                        Script_Output
                fi

        fi
        exit 0
fi

# Get the source ip(version 4) address of the host, sometimes this address
# might have more than one entry, when we have multiple interfaces
hostipv4=`ifconfig -a|grep "inet "|awk '{print $2}'|grep -v -w "127.0.0.1"`

$ECHOPREFIX autoconf6 >> log_msg 2>&1

# Get the source ip(version 6) address of the host
#hostipv6=`ifconfig -a|grep "inet6 "|awk '{print $2}'|awk -F "/" '{print $1}'|\
# grep -v -w "::1"`
$ECHOPREFIX autoconf6 >> log_msg 2>&1
hostipv6=`ifconfig -a|grep "inet6 "|awk '{print $2}'|awk -F "/" '{print $1}' | head -1`

# Get the rule name
rule_name=$1
# Get the list of ports to allow
ports_to_allow=$2


#delimiter
IFS=","
# All these filter rules will be added before the existing rules in the filter rule table
if [ "$ipv4" = "Available" ]
then
	# Add filter rules to allow ports on all interfaces
	for i in ${hostipv4}
	do
		for j in $ports_to_allow 
		do
			# Check whether port specified by $j is in listen mode
			echo $j | grep "-" >> log_msg 2>&1
			if [ $? -ne 0 ]		# The ports are comma separated
			then
				# allow these particular ports
				$ECHOPREFIX genfilt -v4 -a P\
				 -s 0.0.0.0 -m 0.0.0.0 -d $i -M 255.255.255.255 -c all\
				 -O eq -P $j -w B -D "ICE:IPv4:ipsecallowports:$i:$j"  >> log_msg 2>&1
				if [ $? -ne 0 ]
				then
 					print "ipsecallowports.sh: genfilt failed to add filter for IPSec Version 4\n" >> log_msg 2>&1
					ice_status=1
					cur_val=1
					Script_Output
				fi
			
			else
				integer x=`echo $j | sed 's/\([0-9][0-9]*\)\-\([0-9][0-9]*\)/\' | awk -F "-" '{print $1}'` 
				integer y=`echo $j | sed 's/\([0-9][0-9]*\)\-\([0-9][0-9]*\)/\' | awk -F "-" '{print $2}'` 
		                while ((x <= y));
                                do

                                        # allow these particular ports
                                        $ECHOPREFIX genfilt -v4 -a P\
                                         -s 0.0.0.0 -m 0.0.0.0 -d $i -M 255.255.255.255 -c all\
                                         -O eq -P $x -w B -D "ICE:IPv4:ipsecallowports:$i:$x" >> log_msg 2>&1
                                        if [ $? -ne 0 ]
                                        then
						ice_status=1
						cur_val=1
						Script_Output
                                        fi
                                        (( x = x + 1));
				done
			fi
			
	        done	
	# Deny these particular ports
	$ECHOPREFIX genfilt -v4 -a S\
	-s 0.0.0.0 -m 0.0.0.0 -d $i -M 255.255.255.255 -c all\
 	-o any -p 0 -O any -P 0 -r B -i all -f Y -l N -w I -D "ICE:IPv4:ipsecallowports:DenyPorts"  >> log_msg 2>&1
	# Activate the IPSec v4 filters added.
	$ECHOPREFIX mkfilt -v4 -u >> log_msg 2 >&1
	if [ $? -ne 0 ]
	then
		cur_val=1
		ice_status=1
		Script_Output
	else
		cur_val=0
		ice_status=0
		Script_Output
		
	fi
	#$ECHOPREFIX lsfilt -v4 -O	
	done
fi
if [ "$ipv6" = "Available" ]
then
	#Add filter rules to allow ports on all interfaces
	for i in ${hostipv6}
	do
		for j in $ports_to_allow 
		do
			echo $j | grep "-" >> log_msg 2>&1
			if [ $? -ne 0 ]		# The port $j is not in listen mode
			then
				undo=1
				# allow these particular ports 
				$ECHOPREFIX genfilt -v6 -a P\
				 -s 0:0:0:0:0:0:0:0 -m 0 -d $i -M 128 -c tcp -O eq -P $j\
				 -w B -D "ICE:IPv6:ipsecallowports:$i:$j"   >> log_msg 2>&1
				if [ $? -ne 0 ]
				then
 					print "ipsecallowports.sh: genfilt failed to add filter for IPSec Version 6\n" >> log_msg 2>&1
					ice_status=1
					cur_val=1
					Script_Output
				fi
			else
				integer x=`echo $j | sed 's/\([0-9][0-9]*\)\-\([0-9][0-9]*\)/\' | awk -F "-" '{print $1}'` 
				integer y=`echo $j | sed 's/\([0-9][0-9]*\)\-\([0-9][0-9]*\)/\' | awk -F "-" '{print $2}'` 
				while ((x <= y));
				do
					# allow these particular ports
					$ECHOPREFIX genfilt -v6 -a P\
					 -s 0:0:0:0:0:0:0:0 -m 0 -d $i -M 0 -c all\
					 -O eq -P $x -w B -D "ICE:IPv4:ipsecallowports:$i:$x" >> log_msg 2>&1
					if [ $? -ne 0 ]
					then
						ice_status=1
						cur_val=1
						Script_Output
					fi
					(( x = x + 1));
				done			
			fi		
		done


	# allow these particular ports
	$ECHOPREFIX genfilt -v6 -a D\
	-s 0:0:0:0:0:0:0:0 -m 0 -d $i -M 128 -c tcp\
 	-o any -p 0 -r B -i all -f Y -l N -w O -D "ICE:IPv6:ipsecallowports" >> log_msg 2>&1
	# Activate the IPSec v6 filters added.
	$ECHOPREFIX mkfilt -v6 -u >> log_msg 2>&1
	#$ECHOPREFIX lsfilt -v6 -O	
	if [ $? -ne 0 ]
	then 
		cur_val=1
		ice_status=1
		Script_Output
	else
		cur_val=0
		ice_status=0
		Script_Output
	fi
done
fi
exit 0
