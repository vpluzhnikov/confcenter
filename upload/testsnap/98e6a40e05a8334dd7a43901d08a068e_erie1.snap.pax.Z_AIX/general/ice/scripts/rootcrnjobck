#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG         
# This is an automatically generated prolog.  
#                            
# $Source: aix71B bos/usr/lib/security/ice/scripts/rootcrnjobck.sh 1$                         
#                                                           
# COPYRIGHT International Business Machines Corp. 2010,2010              
#                                                                      
# Pvalue: p2 
#Licensed Materials - Property of IBM
#
#Restricted Materials of IBM
#
#US Government Users Restricted Rights - Use, duplication or
#disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Origin: 27
#
# sccsid: $Header: @(#) AIX71B_area/1 bos/usr/lib/security/ice/scripts/rootcrnjobck.sh, libice, aix71B, 1026A_71B 2010-06-11T20:57:08-05:00$
#
# IBM_PROLOG_END_TAG
#     COMPONENT_NAME:  (ICE)  rootcrnjobck.sh 
#     FUNCTIONS:   None
#     ORIGINS:     27
#
#     Syntax:
#           rootcrnjobck - {c|e|p}[v] rulelname toggle
#
#     Parameters:
#           -c          -  Check mode
#           -e          -  Enforce mode
#           -p          -  Preview mode
#           -v          -  verbose mode
#	    rulename	-  Rule Name
#	    toggle	-  Boolean
#			   true  => default level security
#			   false => high level security
#
#     Output:
#           0           -  success
#           1           -  check/enforce failure
#           2           -  usage error
#
#     Description:
#	    This script ensures that the root cronjobs are
#	    owned and writable only by root. This script 
#	    should be run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH

###
#Print Usage
###
Usage()  {
      print "usage: \n
   rootcrnjobck -{c|e|p}[v] rulename toggle" >> log_msg 2>&1 
}

###
#Output from Script to the Native Library
###
Script_Output() {
    print -n "$cur_val%$ice_status%"
    cat log_msg
    print
}

###
#Process arguments
###

#check mode
cflag=0
#Enforce mode
eflag=0
#Preview mode
pflag=0
#Verbose mode
vflag=0

###
#Initialize the Script Output variables
###
cur_val=1
ice_status=0
print -n > log_msg 2>&1

while getopts :cevp OPT
do
        case $OPT in
                c)      cflag=1;;
                e)      eflag=1;;
                v)      vflag=1;;
                p)      pflag=1;;
                ?|:)    Usage
			Script_Output
                        exit 1;;
        esac
done
shift $(($OPTIND -1))

#Enable Verbose
if [[ vflag -eq 1 ]];
then
    set -x
fi

#Need 2 arguments
if [ $# -ne 2 ]
then
        Usage
      Script_Out
        exit 1
fi


# -c, -e and -p mutually exclusive
((chkflg=cflag+eflag+pflag))
if [[ chkflg -ne 1 ]];
then
        Usage
     Script_Output
        exit 1
fi

RULE_NAME=$1
STATUS_ARG=$2
#Toggle argument must be true or false
if ( [ "$STATUS_ARG" != "true" ] && [ "$STATUS_ARG" != "false" ] )
then
	print "Toggle must be true or false" >> log_msg 2>&1
	Usage
	Script_Output
	exit 1
fi

# Preview mode set-up
if [[ pflag -eq 1 ]];
then
        ECHOPREFIX="echo"
else
        ECHOPREFIX=""
fi

#
# When the toggle is False do nothing and return
#
if [ "$STATUS_ARG" == "false" ]
then
	print "This rule is only applicable for Enable/True setting" >> log_msg 2>&1
	cur_val=0
	Script_Output
	exit 0
fi

PREREQ=/etc/security/ice/scripts/chkprereq
PREREQ_LIST="bos.rte.date,bos.rte.shell,bos.rte.commands,bos.rte.ILS"

$ECHOPREFIX $PREREQ $PREERQ_LIST

if [ $? -ne 0 ]
then
        print "prereq missing... \n" >> log_msg 2>&1
	print "Prereqs needed: " $PREREQ_LIST >> log_msg 2>&1
	ice_status=1
	Script_Output
        exit 0
fi

# The sixth field in the crontab file will be the name of a script/command.
# Also, the user can specify more than one script/command per line by using ";" like
#30 4 * * 0  backup -1 -u -f /backup/sb1.bkup /sb ;  gzip -f /backup/sb1.bkup
#30 4 * * 1  backup -2 -u -f /backup/sb2.bkup /sb ;  gzip -f /backup/sb2.bkup
#30 4 * * 2  backup -3 -u -f /backup/sb3.bkup /sb ;  gzip -f /backup/sb3.bkup
#30 4 * * 3  backup -4 -u -f /backup/sb4.bkup /sb ;  gzip -f /backup/sb4.bkup
#
#The following series of awk command will get the name of the scripts/commands
#in the crontab file


for cronjob in `awk '$0 !~ /^#/{ print $0}' /var/spool/cron/crontabs/root |\
 awk -F ";" '{for(i=1;i<=NF;i++) print i " " $i}' | awk  '{if($1 == 1) print $7;\
 else print $2}' | awk -F '\\\\%' '{print $1}'`
do
	path=`whereis $cronjob | awk -F ":" '{print $2}' | awk '{print $1}'`

	if [ "$path" = "$cronjob" ]
	then	
		# If the script is not in standard location
		opofcrnj=`ls -l $cronjob`
		# ls on the cronjob failed, i.e., there is no binary/script
		# associated with the cron job
		if [ $? -eq 0 ]
		then
			owner=`echo "$opofcrnj" | awk '{print $3}'`
			if [ "$owner" != "root" ]
			then
				if [[ cflag -eq 1 ]]; 
				then
					ice_status=2
					cur_val=0
					print "rootcrnjobck.sh:\
 Cronjob $cronjob is not owned by root" >> log_msg 2>&1
					continue;
				else
					$ECHOPREFIX chown root $cronjob	
				fi
			fi
		
			uwrite=0;gwrite=0;owrite=0;
	
			# Determine whether write permissions is provided
			# for user/group/others
			echo "$opofcrnj" | awk '{str=$1;ind=0;\
 while(x=index(str,"w")) { ind+=x; print ind; str=substr(str, x+1)}}'\
 | while read perm
			do
				if [ $perm -eq 3 ]
				then
					uwrite=1;
				fi
				
				if [ $perm -eq 6 ]
				then
					gwrite=1;
				fi
			
				if [ $perm -eq 9 ]
				then
					owrite=1;
				fi
			done

			if [[ cflag -eq 1 ]]; 
			then
				if [ $gwrite -eq 1 ] || [ $owrite -eq 1 ] || [ $uwrite -ne 1 ] 
				then
					ice_status=2
					cur_val=0
					print "rootcrnjobck.sh:\
 Root cron job $cronjob has write permissions for owner:$uwrite, group:$gwrite and others: owrite" >> log_msg 2>&1
				fi
			else
				if [ $uwrite -ne 1 ]
				then
					$ECHOPREFIX chmod u+w $cronjob
				fi

				if [ $gwrite -eq 1 ]
				then
					$ECHOPREFIX chmod g-w $cronjob
				fi
				
				if [ $owrite -eq 1 ]
				then
					$ECHOPREFIX chmod o-w $cronjob
				fi
			fi
		else
			if [[ cflag -eq 1 ]]; 
			then
				print "rootcrnjobck.sh:\
 Cronjob $cronjob do not have a binary/script associated with it" >> log_msg 2>&1 
			else
				print "rootcrnjobck.sh:\
 Cronjob $cronjob do not have a binary/script associated with it" >> log_msg 2>&1 
			fi
		fi
	fi
done

Script_Output
exit 0
