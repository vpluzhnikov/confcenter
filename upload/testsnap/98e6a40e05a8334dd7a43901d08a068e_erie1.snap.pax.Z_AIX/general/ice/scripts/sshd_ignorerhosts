# IBM_PROLOG_BEGIN_TAG         
# This is an automatically generated prolog.  
#                            
# $Source: aix71B bos/usr/lib/security/ice/scripts/sshd_ignorerhosts.sh 1$                         
#                                                           
# COPYRIGHT International Business Machines Corp. 2010,2010              
#                                                                      
# Pvalue: p2 
#Licensed Materials - Property of IBM
#
#Restricted Materials of IBM
#
#US Government Users Restricted Rights - Use, duplication or
#disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Origin: 27
#
# sccsid: $Header: @(#) AIX71B_area/1 bos/usr/lib/security/ice/scripts/sshd_ignorerhosts.sh, libice, aix71B, 1035A_71B 2010-07-27T10:06:35-05:00$
#
# IBM_PROLOG_END_TAG
#!/usr/bin/ksh
#       COMPONENT_NAME: (ICE) sshd_ignorerhosts.sh
#       FUNCTIONS:      None
#       ORIGINS:        27
#
#       Syntax:
#               sshd_confprl -{c|e|p}[v] rulename toggle
#       Parameters:
#               -c      - Check mode
#               -e      - Enforce mode
#               -p      - Preview mode
#               -v      - verbose mode (unimplemented)
#               lname   - rule_name
#               toggle  - Boolean
#                         false => Disable 
#                         true  => Enable

#       OUTPUT:
#               0       - success
#               1       - check/enforce failure
#
#       Description:
#               This script enables/disbles IgnoreRhosts entry from /etc/ssh/sshd_config file
#               This script should be run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH
exec 2>&1
###
#Print Usage
###
Usage() {
        ice_status=1
        print "usage: \n
   sshd_ignorerhosts -{c|e|p}[v] rulename toggle\n" >> log_msg 2>&1
}

###
#Output from Script to the Native Library
###
Script_Output() {
        print -n "$cur_val%$ice_status%"
        cat log_msg
        print
}

###
#Process arguments
###

#Check mode
cflag=0
#Enforce mode
eflag=0
#Preview mode
pflag=0
#Verbose mode
vflag=0

###
#Initialize the Script Output variables
###
cur_val=0
ice_status=0
print -n > log_msg 2>&1

while getopts :cevp OPT
do
        case $OPT in
                c)      cflag=1;;
                e)      eflag=1;;
                v)      vflag=1;;
                p)      pflag=1;;
                ?|:)    Usage
                        Script_Output
                        exit 1;;
        esac
done
shift $(($OPTIND -1))

#Enable Verbose
if [[ vflag -eq 1 ]];
then
        set -x
fi

#Need 2 argument
if [[ $# -lt 2 ]];
then
        Usage
        Script_Output
        exit 1
fi

# -c, -e and -p mutually exclusive
((chkflg=cflag+eflag+pflag))
if [[ chkflg -ne 1 ]];
then
        Usage
        Script_Output
        exit 1
fi

RULE_NAME=$1
STATUS_ARG=$2
SSHDCFG=/etc/ssh/sshd_config
TMP2=/etc/security/ice/scripts/tmp
PID=$$
#Toggle argument must be true or false
if ( [ "$STATUS_ARG" != "true" ] && [ "$STATUS_ARG" != "false" ] )
then
        print "Toggle must be true or false" >> log_msg 2>&1
        Usage
        Script_Output
        exit 1
fi

# Preview mode set-up
if [[ pflag -eq 1 ]];
then
        ECHOPREFIX="echo"
else
        ECHOPREFIX=""
fi

PREREQ=/etc/security/ice/scripts/chkprereq
PREREQ_LIST="openssh.base.client,openssh.base.server"

$ECHOPREFIX $PREREQ $PREREQ_LIST

if [ $? -ne 0 ]
then
        print "prereq missing... " >> log_msg 2>&1
        print "Prereqs needed: " $PREREQ_LIST >> log_msg 2>&1
        ice_status=1
        Script_Output
        exit 0
fi

# Check the current values for the below variables in /etc/ssh/sshd_config file

IRHv=`awk '$0 !~ /^#/' $SSHDCFG | awk '/IgnoreRhosts/'`
if [ -z "$IRHv" ]
then
        curIRHS=yes     # default value in $SSHDCFG
else
        curIRHS=`echo $IRHv | awk '{print $2}'`
fi

#checking
if [[ cflag -eq 1 ]];
then
	if [ -f $SSHDCFG ]
	then
		# Default case
        	if [ "$STATUS_ARG" = "false" ]
        	then
                        if [ "$curIRHS" = "yes" ] 
                        then
		 		print "IgnoreRhosts should be set to No but it is set to yes." >> log_msg 2>&1
			        ice_status=2
                                cur_value=yes

                        else
                        	print "IgnoreRhosts value is No." >> log_msg 2>&1
                                ice_status=0
                                cur_value=no
                        fi
	        else
		# Enable case
                        if [ "$curIRHS" = "no" ] 
                        then
		 		print "IgnoreRhosts should be set to yes but it is set to no." >> log_msg 2>&1
			        ice_status=2
                                cur_value=yes

                        else
                        	print "IgnoreRhosts value is set to yes" >> log_msg 2>&1
                                ice_status=0
                                cur_value=no
                        fi
		fi
        else
		print "/etc/ssh/sshd_config file does not exist" >> log_msg 2>&1
	fi
	Script_Output
	exit 0
fi

###
#Preview/Enforcing
###


if [ -f $SSHDCFG  ]
then
	if [ "$STATUS_ARG" = "false" ]
	then
                sed '/IgnoreRhosts/d' $SSHDCFG >$TMP2$PID
                echo "IgnoreRhosts no" >>$TMP2$PID
                mv $TMP2$PID $SSHDCFG
		ice_status=0
		cur_val=no
		print "Set IgnoreRhosts to no." >> log_msg 2>&1
	fi
	if [ "$STATUS_ARG" = "true" ]
	then
                sed '/PermitRootLogin/d' $SSHDCFG >$TMP2$PID
                echo "PermitRootLogin yes" >>$TMP2$PID
                mv $TMP2$PID $SSHDCFG
		ice_status=0
		cur_val=yes
		print "Set IgnoreRhosts to yes." >> log_msg 2>&1
	fi
fi
# restart sshd for the above configurations to take affect
                ssh_pid=`ps -A | grep sshd |awk '{print $1}'`
                kill $ssh_pid >> log_msg 2>&1
                sleep 2         # for the kill to succeed

# start the sshd afresh
                /usr/sbin/sshd >> log_msg 2>&1
                if [ $? -ne 0 ]
                then
                print "Failed to restart sshd daemon\n" >> log_msg 2>&1
                fi



Script_Output
exit 0
