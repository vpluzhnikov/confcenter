# IBM_PROLOG_BEGIN_TAG         
# This is an automatically generated prolog.  
#                            
# $Source: aix71B bos/usr/lib/security/ice/scripts/audit.sh 2$                         
#                                                           
# COPYRIGHT International Business Machines Corp. 2010,2010              
#                                                                      
# Pvalue: p2 
#Licensed Materials - Property of IBM
#
#Restricted Materials of IBM
#
#US Government Users Restricted Rights - Use, duplication or
#disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Origin: 27
#
# sccsid: $Header: @(#) AIX71B_area/2 bos/usr/lib/security/ice/scripts/audit.sh, libice, aix71B, 1035A_71B 2010-08-11T15:02:44-05:00$
#
# IBM_PROLOG_END_TAG
#!/usr/bin/ksh

#       COMPONENT_NAME: (ICE) audit.sh
#       FUNCTIONS:      None
#       ORIGINS:        27
#
#       Syntax:
#               audit -{c|e|p}[v] rulename 
#				 (ex. audit.sh -c xxx "LIST|2|string|dod|string|pci")
#					string can also be high, medium, low.
#       Parameters:
#               -c      - Check mode
#               -e      - Enforce mode
#               -p      - Preview mode
#               -v      - verbose mode (unimplemented)
#               lname   - rule_name (ex. "LIST|2|string|dod|string|pci")

#       OUTPUT:
#               0       - success
#               1       - check/enforce failure
#
#       Description:
#			This script will work with dod and pci rules.
#GEN002660
#GEN002720
#GEN002740
#GEN002760
#GEN002800
#GEN002820
#GEN002860 -needs manually check
#GEN002940 -needs manually check


export PATH=/usr/bin:/usr/sbin:$PATH
exec 2>&1

###
#Print Usage
###
Usage() {
        ice_status=1
        print "usage: \n
   audit -{c|e|p}[v] rulename list\n" >> log_msg 2>&1
}

###
#Output from Script to the Native Library
###
Script_Output() {
		if [ $ice_status -eq 2 ]
		then
			cur_val=0
		elif [ $ice_status -eq 0 ]
		then
			cur_val=1
		fi

		if [ ! -z "$cur_val" ]
		then
			if [ $cur_val -eq 0 ]
			then
				cur_val="false"
			elif [ $cur_val -eq 1 ]
			then
				cur_val="true"
			fi
		fi

        print -n "$cur_val%$ice_status%"
        cat log_msg
        print
}

###
#Process arguments
###

#Check mode
cflag=0
#Enforce mode
eflag=0
#Preview mode
pflag=0
#Verbose mode
vflag=0

###
#Initialize the Script Output variables
###
cur_val=0
ice_status=0
print -n > log_msg 2>&1

while getopts :cevp OPT
do
        case $OPT in
                c)      cflag=1;;
                e)      eflag=1;;
                v)      vflag=1;;
                p)      pflag=1;;
                ?|:)    Usage
                        Script_Output
                        exit 1;;
        esac
done
shift $(($OPTIND -1))

#Enable Verbose
if [[ vflag -eq 1 ]];
then
        set -x
fi

#Need 1 argument
if [[ $# -lt 1 ]];
then
        Usage
        Script_Output
        exit 1
fi

# -c, -e and -p mutually exclusive
((chkflg=cflag+eflag+pflag))
if [[ chkflg -ne 1 ]];
then
        Usage
        Script_Output
        exit 1
fi

RULE_NAME=$2

# Preview mode set-up
if [[ pflag -eq 1 ]];
then
        ECHOPREFIX="echo"
else
        ECHOPREFIX=""
fi

PREREQ=/etc/security/ice/scripts/chkprereq
PREREQ_LIST="bos.rte.security,bos.rte.date,bos.rte.ILS"

$ECHOPREFIX $PREREQ $PREREQ_LIST

if [ $? -ne 0 ]
then
        print "prereq missing... " >> log_msg 2>&1
        print "Prereqs needed: " $PREREQ_LIST >> log_msg 2>&1
        ice_status=1
        Script_Output
        exit 0
fi

config="/etc/security/audit/config"
PID=$$
TMPF1=/etc/security/ice/tmp/f1$PID

#Parse command line input
nInput=`echo $RULE_NAME | cut -d "|" -f2`
nRule=0		#number of valid rule
pci=0
dod=0
low=0
medium=0
high=0

findRule()
{
	if [ `echo $typeVal | grep -c -i "string"` -gt 0 ]
	then
		if [ `echo $ruleVal | grep -c -i "pci"` -gt 0 ]
		then
			if [ $pci -eq 0 ]
			then
				pci=1
				nRule=$((nRule+1))
			fi
		elif [ `echo $ruleVal | grep -c -i "dod"` -gt 0 ]
		then
			if [ $dod -eq 0 ]
			then
				dod=1
				nRule=$((nRule+1))
			fi
		elif [ `echo $ruleVal | grep -c -i "high"` -gt 0 ]
		then
			if [ $high -eq 0 ]
			then
				high=1
				nRule=$((nRule+1))
			fi
		elif [ `echo $ruleVal | grep -c -i "medium"` -gt 0 ]
		then
			if [ $medium -eq 0 ]
			then
				medium=1
				nRule=$((nRule+1))
			fi
		elif [ `echo $ruleVal | grep -c -i "low"` -gt 0 ]
		then
			if [ $low -eq 0 ]
			then
				low=1
				nRule=$((nRule+1))
			fi
		fi
	fi
}

checkClasses()
{
	for i in $rootClasses
	do
		if [ `cat $config | egrep "root =" | tr -s " " "," | cut -d "," -f3- | egrep -c "$i"` -eq 0 ]
		then
			cur_val=0
			print "Audit class $i is not set for root." >> log_msg 2>&1
			ice_status=2
		fi
	done

	for i in $userClasses
	do
		if [ `cat $config | egrep "default =" | tr -s " " "," | cut -d "," -f3- | egrep -c "$i"` -eq 0 ]
		then
			cur_val=0
			print "Audit class $i is not set for users." >> log_msg 2>&1
			ice_status=2
		fi
	done
}

configUser()
{
	for i in $userClasses
	do
		if [ `cat $config | egrep "$user" | tr -s " " "," | cut -d "," -f3- | egrep -c "$i"` -eq 0 ]
		then
			sed "/$user/s|$|,$i|" $config > $TMPF1
			if [ $? -eq 0 ]
			then
				mv $TMPF1 $config
			fi
		fi
	done
}

checkEvents()
{
	for i in $ruleEvents
	do
		if [ `cat $config | egrep "$curClass" | tr -s " " "," | cut -d "," -f3- | egrep -c "$i"` -eq 0 ]
		then
			cur_val=0
			print "Audit event $i is not set." >> log_msg 2>&1
			ice_status=2
		fi
	done
}

configEvents()
{
	for i in $ruleEvents
	do
		if [ `cat $config | egrep "$curClass" | tr -s " " "," | cut -d "," -f3- | egrep -c "$i"` -eq 0 ]
		then
			sed "/$curClass/s|$|,$i|" $config > $TMPF1
			if [ $? -eq 0 ]
			then
				mv $TMPF1 $config
			fi
		fi
	done
}

rmEvent()
{
	for i in $rmList
	do
		tmpval=`cat $config | egrep "$user" | tr -s " " "," | cut -d "," -f3-`
		if [ ! -z $tmpval ]
		then
			if [ `echo $tmpval | egrep -c "$i"` -gt 0 ]
			then
				v1=`echo $tmpval | cut -d "," -f1`
				v2=`echo $tmpval | cut -d "," -f2`
				if [ `echo $tmpval | egrep -c ",$i"` -gt 0 ]
				then
					sed "/$user/s/,$i//" $config > $TMPF1
					if [ $? -eq 0 ]
					then
						mv $TMPF1 $config
					fi
				elif [ "$v1" = "$i" ] && [ "$v2" = ""  ]
				then
					sed "/$user/s/$i,//" $config > $TMPF1
					if [ $? -eq 0 ]
					then
						mv $TMPF1 $config
					fi
				elif [ "$v1" = "$i" ] && [ ! "$v2" = ""  ]
				then
					sed "/$user/s/$i,//" $config > $TMPF1
					if [ $? -eq 0 ]
					then
						mv $TMPF1 $config
					fi
				else
					sed "/$user/s/$i//" $config > $TMPF1
					if [ $? -eq 0 ]
					then
						mv $TMPF1 $config
					fi
				fi
			fi
		fi
	done
	#remove user if no event is set up
	tmpval=`cat $config | egrep "$user" | tr -s " " "," | cut -d "," -f3-`
	if [ "$tmpval" = "" ]
	then
		#delete this line
		sed "/$user/ d" $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	fi
}

if [ $nInput -gt 0 ] && [ $nInput -le 5 ]
then

	i=1
	ruleTmp=$RULE_NAME
	while [ $i -le $nInput ]
	do
		curRule=`echo $ruleTmp | cut -d "|" -f3-`
		typeVal=`echo $curRule | cut -d "|" -f1`
		ruleVal=`echo $curRule | cut -d "|" -f2`
		findRule
		i=$((i+1))
		ruleTmp=$curRule
	done
elif [ $nInput -eq 0 ] && [ $eflag -eq 1 ]
then
	# audit.sh -e xxx "LIST|0"
	# disable all rules

	user="root ="
	rmList="dodevents pcievents general SRC mail cron tcpip ipsec lvm"
	rmEvent
	user="default ="
	rmList="general SRC cron tcpip"
	rmEvent
	ice_status=0
	audit shut
	Script_Output
	exit 0
else
	print "Must enter rule (pci, dod, high, medium, low)." >> log_msg 2>&1
	ice_status=1
	Script_Output
	exit 0
fi

if [ $nRule -eq 0 ]
then
	print "Must enter rule (pci, dod, high, medium, low)." >> log_msg 2>&1
	ice_status=1
	Script_Output
	exit 0
fi

#dodEvents contains pciEvents
dodEvents="FILE_Open FILE_Unlink FS_Rmdir ACCT_Disable ACCT_Enable AUD_it BACKUP_Export DEV_Change DEV_Configure DEV_Create FILE_Chpriv FILE_Fchpriv FILE_Mknod FILE_Owner FS_Chroot FS_Mount FS_Umount PASSWORD_Check PROC_Adjtime PROC_Kill PROC_Privilege PROC_Setpgid PROC_SetUserIds RESTORE_Import TCBCK_Delete USER_Change USER_Create USER_Reboot USER_Remove USER_SetEnv USER_Login USER_Logout INIT_Start INIT_End USER_SU FILE_Acl FILE_Fchmod FILE_Fchown FILE_Mode"

pciEvents="ACCT_Disable ACCT_Enable USER_Change USER_Create USER_Login USER_Logout USER_Reboot USER_Remove FS_Chroot FS_Mount FS_Umount" 

highRoot="general SRC mail cron tcpip ipsec lvm"
highUser="general SRC cron tcpip"

mediumRoot="general SRC tcpip"
mediumUser="general tcpip"

lowRoot="general tcpip"
lowUser="general"

rootEvents="dodEvents pciEvents general SRC mail cron tcpip ipsec lvm"
userEvents="general SRC cron tcpip"

###########
# Checking
###########
if [[ cflag -eq 1 ]];
then
	#GEN002660
	if [ `audit query | head -1 | grep -c "on"` -eq 0 ]
	then
		cur_val=0
		print "Audit is disabled." >> log_msg 2>&1
		ice_status=2
	fi

	#DoD events checking
	if [ $dod -eq 1 ]
	then
		#check greater than 1 to make sure it also set up for users
		if [ ! `cat $config | egrep -c "dodevents"` -gt 2 ]
		then
			cur_val=0
			print "dodevents are not setup for auditing." >> log_msg 2>&1
			ice_status=2
		else
			ruleEvents="$dodEvents"
			curClass="dodevents ="
			checkEvents

			ruleEvents="dodevents"
			curClass="root ="
			checkEvents

			curClass="default ="
			checkEvents
		fi
	elif [ $pci -eq 1 ]
	then
		#PCI events checking
		#check greater than 1 to make sure it also set up for users
		if [ ! `cat $config | egrep -c "pcievents|dodevents"` -gt 2 ]
		then
			cur_val=0
			print "pcievents are not setup for auditing." >> log_msg 2>&1
			ice_status=2
		else
			ruleEvents="$pciEvents"
			if [ `cat $config | egrep -c "dodevents"` -gt 1 ]
			then
				curClass="dodevents ="
				tmpClass="dodevents"
			elif [ `cat $config | egrep -c "pcievents"` -gt 1 ]
			then
				curClass="pcievents ="
				tmpClass="pcievents"
			fi
			checkEvents

			ruleEvents="$tmpClass"
			curClass="root ="
			checkEvents

			curClass="default ="
			checkEvents

		fi
	fi

	#High, Medium, Low checking
	################## High ######################
	if [ $high -eq 1 ]
	then
		if [ ! `cat $config | egrep -c "highRoot"` -gt 1 ]
		then
			cur_val=0
			print "highRoot is not setup for auditing." >> log_msg 2>&1
			ice_status=2
		else
			ruleEvents="$highRoot"
			curClass="highRoot ="
			checkEvents

			ruleEvents="highRoot"
			curClass="root ="
			checkEvents

			ruleEvents="highUser"
			curClass="default ="
			checkEvents
		fi
	elif [ $medium -eq 1 ]
	then
		################## Medium ######################
		if [ ! `cat $config | egrep -c "mediumRoot|highRoot"` -gt 1 ]
		then
			cur_val=0
			print "mediumRoot is not setup for auditing." >> log_msg 2>&1
			ice_status=2
		else
			if [ `cat $config | egrep "root =" | tr -s " " "," | cut -d "," -f3- | egrep -c "highRoot"` -eq 1 ]
			then
				# check high root
				ruleEvents="$mediumRoot"
				curClass="highRoot ="
				checkEvents
			else
				# check medium root
				ruleEvents="$mediumRoot"
				curClass="mediumRoot ="
				checkEvents

				ruleEvents="mediumRoot"
				curClass="root ="
				checkEvents
			fi

			if [ `cat $config | egrep "default =" | tr -s " " "," | cut -d "," -f3- | egrep -c "highUser"` -eq 1 ]
			then
				#check high user
				ruleEvents="$mediumUser"
				curClass="highUser ="
				checkEvents
			else
				#check medium user
				ruleEvents="$mediumUser"
				curClass="mediumUser ="
				checkEvents

				ruleEvents="mediumUser"
				curClass="default ="
				checkEvents
			fi
		fi
	elif [ $low -eq 1 ]
	then
		################## Low ######################
		if [ ! `cat $config | egrep -c "lowRoot|mediumRoot|highRoot"` -gt 1 ]
		then
			cur_val=0
			print "lowRoot is not setup for auditing." >> log_msg 2>&1
			ice_status=2
		else
			if [ `cat $config | egrep "root =" | tr -s " " "," | cut -d "," -f3- | egrep -c "highRoot"` -eq 1 ]
			then
				# check high root
				ruleEvents="$lowRoot"
				curClass="highRoot ="
				checkEvents
			elif [ `cat $config | egrep "root =" | tr -s " " "," | cut -d "," -f3- | egrep -c "mediumRoot"` -eq 1 ]
			then
				# check high root
				ruleEvents="$lowRoot"
				curClass="mediumRoot ="
				checkEvents
			else
				# check low root
				ruleEvents="$lowRoot"
				curClass="lowRoot ="
				checkEvents

				ruleEvents="lowRoot"
				curClass="root ="
				checkEvents
			fi

			if [ `cat $config | egrep "default =" | tr -s " " "," | cut -d "," -f3- | egrep -c "highUser"` -eq 1 ]
			then
				#check high user
				ruleEvents="$lowUser"
				curClass="highUser ="
				checkEvents

			elif [ `cat $config | egrep "default =" | tr -s " " "," | cut -d "," -f3- | egrep -c "mediumUser"` -eq 1 ]
			then
				#check medim user
				ruleEvents="$lowUser"
				curClass="mediumUser ="
				checkEvents
			else
				#check low user
				ruleEvents="$lowUser"
				curClass="lowUser ="
				checkEvents

				ruleEvents="lowUser"
				curClass="default ="
				checkEvents
			fi
		fi
	fi

	Script_Output
	exit 0
fi


####################
# Preview/Enforcing
####################
cur_val=
if [ $pci -gt 0 -o $dod -gt 0 ]
then
	if [ $dod -eq 1 ]
	then
		if [ `cat $config | egrep -c "dodevents ="` -eq 0 ]
		then
			#add full dod events stanza
			sed '
			/^users:/ i\
	dodevents = FILE_Open,FILE_Unlink,FS_Rmdir,ACCT_Disable,ACCT_Enable,AUD_it,BACKUP_Export,DEV_Change,DEV_Configure,DEV_Create,FILE_Chpriv,FILE_Fchpriv,FILE_Mknod,FILE_Owner,FS_Chroot,FS_Mount,FS_Umount,PASSWORD_Check,PROC_Adjtime,PROC_Kill,PROC_Privilege,PROC_Setpgid,PROC_SetUserIds,RESTORE_Import,TCBCK_Delete,USER_Change,USER_Create,USER_Reboot,USER_Remove,USER_SetEnv,USER_Login,USER_Logout,INIT_Start,INIT_End,USER_SU,FILE_Acl,FILE_Fchmod,FILE_Fchown,FILE_Mode' $config > $TMPF1
			if [ $? -eq 0 ]
			then
				mv $TMPF1 $config
			fi
		else
			ruleEvents="$dodEvents"
			curClass="dodevents ="
			configEvents
		fi

		#config users to audit dod
		if [ `cat $config | egrep -c "root ="` -eq 0 ]
		then
			#add root to dodevents
			sed '
			/^users:/ a\
	root = dodevents' $config > $TMPF1
			if [ $? -eq 0 ]
			then
				mv $TMPF1 $config
			fi
		else
			if [ `cat $config | egrep "root =" | tr -s " " "," | cut -d "," -f3- | egrep -c "dodevents"` -eq 0 ]
			then
				sed "/root =/s|$|,dodevents|" $config > $TMPF1
				if [ $? -eq 0 ]
				then
					mv $TMPF1 $config
				fi
			fi
		fi
		#add users to dodevents
		if [ `cat $config | egrep -c "default ="` -eq 0 ]
		then
			#no default there, add complete default classes
			sed '
			/^users:/ a\
	default = dodevents' $config > $TMPF1
			if [ $? -eq 0 ]
			then
				mv $TMPF1 $config
			fi
		else
			user="default ="
			userClasses="dodevents"
			configUser
		fi
		#remove pcievents
		if [ `cat $config | egrep "root =" | tr -s " " "," | cut -d "," -f3- | egrep -c "pcievents"` -gt 0 ]
		then
			user="root ="
			rmList="pcievents"
			rmEvent
		fi
		if [ `cat $config | egrep "default =" | tr -s " " "," | cut -d "," -f3- | egrep -c "pcievents"` -gt 0 ]
		then
			user="default ="
			rmList="pcievents"
			rmEvent
		fi

	elif [ $pci -eq 1 ]
	then
		if [ `cat $config | egrep -c "pcievents =|dodevents ="` -eq 0 ]
		then
			#add full pci events stanza
			sed '
			/^users:/ i\
	pcievents = ACCT_Disable,ACCT_Enable,USER_Change,USER_Create,USER_Login,USER_Logout,USER_Reboot,USER_Remove,FS_Chroot,FS_Mount,FS_Umount' $config > $TMPF1
			if [ $? -eq 0 ]
			then
				mv $TMPF1 $config
			fi
		else
			ruleEvents="$pciEvents"
			curClass="pcievents ="
			configEvents
		fi

		#config users to audit pci
		if [ `cat $config | egrep -c "root ="` -eq 0 ]
		then
			#add root to pcievents
			sed '
			/^users:/ a\
	root = pcievents' $config > $TMPF1
			if [ $? -eq 0 ]
			then
				mv $TMPF1 $config
			fi
		else
			if [ `cat $config | egrep "root =" | tr -s " " "," | cut -d "," -f3- | egrep -c "pcievents|dodevents"` -eq 0 ]
			then
				sed "/root =/s|$|,pcievents|" $config > $TMPF1
				if [ $? -eq 0 ]
				then
					mv $TMPF1 $config
				fi
			fi
		fi
		#add users to pcievents
		if [ `cat $config | egrep -c "default ="` -eq 0 ]
		then
			#no default there, add complete default classes
			sed '
			/^users:/ a\
	default = pcievents' $config > $TMPF1
			if [ $? -eq 0 ]
			then
				mv $TMPF1 $config
			fi
		elif [ `cat $config | egrep "default =" | tr -s " " "," | cut -d "," -f3- | egrep -c "dodevents"` -eq 0 ]
		then
			#if dodevents not there, add pcievents
			user="default ="
			userClasses="pcievents"
			configUser
		fi
	fi
fi

#high, medium, low configuration
if [ $high -eq 1 ]
then
	############ high ############

	#add root stanza
	if [ `cat $config | egrep -c "highRoot ="` -eq 0 ]
	then
		#add events stanza
		sed '
		/^users:/ i\
	highRoot = general,SRC,mail,cron,tcpip,ipsec,lvm' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		ruleEvents="$highRoot"
		curClass="highRoot ="
		configEvents
	fi

	#add user stanza
	if [ `cat $config | egrep -c "highUser ="` -eq 0 ]
	then
		#add events stanza
		sed '
		/^users:/ i\
	highUser = general,SRC,cron,tcpip' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		ruleEvents="$highUser"
		curClass="highUser ="
		configEvents
	fi

	#config root to audit high events
	if [ `cat $config | egrep -c "root ="` -eq 0 ]
	then
		sed '
		/^users:/ a\
	root = highRoot' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		user="root ="
		userClasses="highRoot"
		configUser
	fi

	#config user to audit high events
	if [ `cat $config | egrep -c "default ="` -eq 0 ]
	then
		sed '
		/^users:/ a\
	default = highUser' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		user="default ="
		userClasses="highUser"
		configUser
	fi

	#remove medium 
	if [ `cat $config | egrep "root =" | tr -s " " "," | cut -d "," -f3- | egrep -c "mediumRoot"` -gt 0 ]
	then
		user="root ="
		rmList="mediumRoot"
		rmEvent
	fi
	
	if [ `cat $config | egrep "default =" | tr -s " " "," | cut -d "," -f3- | egrep -c "mediumUser"` -gt 0 ]
	then
		user="default ="
		rmList="mediumUser"
		rmEvent
	fi
	
	#remove low 
	if [ `cat $config | egrep "root =" | tr -s " " "," | cut -d "," -f3- | egrep -c "lowRoot"` -gt 0 ]
	then
		user="root ="
		rmList="lowRoot"
		rmEvent
	fi

	if [ `cat $config | egrep "default =" | tr -s " " "," | cut -d "," -f3- | egrep -c "lowUser"` -gt 0 ]
	then
		user="default ="
		rmList="lowUser"
		rmEvent
	fi
elif [ $medium -eq 1 ]
then
	############ medium ############

	#add root stanza
	if [ `cat $config | egrep -c "mediumRoot ="` -eq 0 ]
	then
		#add events stanza
		sed '
		/^users:/ i\
	mediumRoot = general,SRC,tcpip' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		ruleEvents="$mediumRoot"
		curClass="mediumRoot ="
		configEvents
	fi

	#add user stanza
	if [ `cat $config | egrep -c "mediumUser ="` -eq 0 ]
	then
		#add events stanza
		sed '
		/^users:/ i\
	mediumUser = general,tcpip' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		ruleEvents="$mediumUser"
		curClass="mediumUser ="
		configEvents
	fi

	#config root to audit medium events
	if [ `cat $config | egrep -c "root ="` -eq 0 ]
	then
		sed '
		/^users:/ a\
	root = mediumRoot' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		if [ `cat $config | grep "root =" | egrep -c "highUser|mediumUser"` -eq 0 ]
		then
			user="root ="
			userClasses="mediumRoot"
			configUser
		fi
	fi

	#config user to audit medium events
	if [ `cat $config | egrep -c "default ="` -eq 0 ]
	then
		sed '
		/^users:/ a\
	default = mediumUser' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		if [ `cat $config | grep "default =" | egrep -c "highUser|mediumUser"` -eq 0 ]
		then
			user="default ="
			userClasses="mediumUser"
			configUser
		fi
	fi


	#remove low 
	if [ `cat $config | egrep "root =" | tr -s " " "," | cut -d "," -f3- | egrep -c "lowRoot"` -gt 0 ]
	then
		user="root ="
		rmList="lowRoot"
		rmEvent
	fi

	if [ `cat $config | egrep "default =" | tr -s " " "," | cut -d "," -f3- | egrep -c "lowUser"` -gt 0 ]
	then
		user="default ="
		rmList="lowUser"
		rmEvent
	fi
elif [ $low -eq 1 ]
then
	############ low ############

	#add root stanza
	if [ `cat $config | egrep -c "lowRoot ="` -eq 0 ]
	then
		#add events stanza
		sed '
		/^users:/ i\
	lowRoot = general,tcpip' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		ruleEvents="$lowRoot"
		curClass="lowRoot ="
		configEvents
	fi

	#add user stanza
	if [ `cat $config | egrep -c "lowUser ="` -eq 0 ]
	then
		#add events stanza
		sed '
		/^users:/ i\
	lowUser = general' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		ruleEvents="$lowUser"
		curClass="lowUser ="
		configEvents
	fi

	#config root to audit low events
	if [ `cat $config | egrep -c "root ="` -eq 0 ]
	then
		sed '
		/^users:/ a\
	root = lowRoot' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		if [ `cat $config | grep "root =" | egrep -c "highRoot|mediumRoot|lowRoot"` -eq 0 ]
		then
			user="root ="
			userClasses="lowRoot"
			configUser
		fi
	fi

	#config user to audit low events
	if [ `cat $config | egrep -c "default ="` -eq 0 ]
	then
		sed '
		/^users:/ a\
	default = lowUser' $config > $TMPF1
		if [ $? -eq 0 ]
		then
			mv $TMPF1 $config
		fi
	else
		if [ `cat $config | grep "default =" | egrep -c "highUser|mediumUser|lowUser"` -eq 0 ]
		then
			user="default ="
			userClasses="lowUser"
			configUser
		fi
	fi
fi

#start audit
if [ `audit query | head -1 | egrep -c "on"` -eq 0 ]
then
	audit start
	if [ $? -ne 0 ]
	then
		ice_status=1
		print "audit failed to start." >> log_msg 2>&1
		Script_Output
		exit 0
	fi
else
	audit shut
	if [ $? -ne 0 ]
	then
		ice_status=1
		print "audit failed to shutdown." >> log_msg 2>&1
		Script_Output
		exit 0
	fi
	audit start
	if [ $? -ne 0 ]
	then
		ice_status=1
		print "audit failed to start." >> log_msg 2>&1
		Script_Output
		exit 0
	fi
fi

Script_Output
exit 0
