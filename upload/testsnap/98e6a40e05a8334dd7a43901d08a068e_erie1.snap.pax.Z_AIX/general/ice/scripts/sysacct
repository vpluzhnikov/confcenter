# IBM_PROLOG_BEGIN_TAG         
# This is an automatically generated prolog.  
#                            
# $Source: aix710 bos/usr/lib/security/ice/scripts/sysacct.sh 1$                         
#                                                           
# COPYRIGHT International Business Machines Corp. 2010,2010              
#                                                                      
# Pvalue: p2 
#Licensed Materials - Property of IBM
#
#Restricted Materials of IBM
#
#US Government Users Restricted Rights - Use, duplication or
#disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Origin: 27
#
# sccsid: $Header: @(#) AIX710_area/1 bos/usr/lib/security/ice/scripts/sysacct.sh, libice, aix710, 1020A_710 2010-05-03T14:25:53-05:00$
#
# IBM_PROLOG_END_TAG
#!/usr/bin/ksh

########################################################################
# This script will check in the access control files to make sure the 
# default system accounts (with the possible exception of root) are not
# listed in the allow file.  If there is only a deny file, the default
# accounts (with the possible exception of root) will be listed there.
# Access Control files cover in this scripts are below along with rule 
# input:
# 	at.allow & at.deny			Input: at
# 	cron.allow & cron.deny		Input: cron
#	ftpusers					Input: ftpusers
#
########################################################################

# GEN002960
# GEN003280
# GEN003300
# GEN003320
# GEN003060
# GEN004880
# GEN004900

INSTALLDIR=/etc/security/ice/scripts
. $INSTALLDIR/iceInit

GENACCOUNT="daemon bin sys adm uucp guest nobody lpd lp invscout snapp ipsec nuucp pconsole esaadmin sshd"
MOREACCOUNT=

PASSWDFILE=/etc/passwd

case $RULE_NAME in
      at) ALLOWFILE=/var/adm/cron/at.allow; DENYFILE=/var/adm/cron/at.deny;
	  	  ALLOW=at.allow; DENY=at.deny;
		  SINGLEFILE=FALSE;
      	  PREREQ_LIST="bos.rte.date,bos.rte.commands,bos.rte.shell,bos.rte.ILS";;
    cron) ALLOWFILE=/var/adm/cron/cron.allow; DENYFILE=/var/adm/cron/cron.deny;
	  	  ALLOW=cron.allow; DENY=cron.deny;
		  SINGLEFILE=FALSE;
		  PREREQ_LIST="bos.rte.date,bos.rte.commands,bos.rte.shell,bos.rte.ILS";;       

ftpusers) ALLOWFILE=/etc/ftpusers; DENYFILE=/etc/ftpusers;
		  ALLOW=ftpusers; DENY=ftpusers;
		  SINGLEFILE=TRUE;
		  #MOREACCOUNT="root"
		  PREREQ_LIST="bos.rte.date,bos.rte.commands,bos.rte.shell,bos.rte.ILS";;       

	   *) ALLOWFILE=INVALID;
esac

checkPrereq

if [ $ALLOWFILE = INVALID ]
then
	print "Invalid input $RULE_NAME." >> log_msg 2>&1
	ice_status=1
	Script_Output
	exit 0
fi

SYSACCOUNT="$GENACCOUNT $MOREACCOUNT"

###########
# Checking
###########

if [[ cflag -eq 1 ]];
then
	if [ "$STATUS_ARG" = "true" ]	 
	then
		if [ $SINGLEFILE = TRUE ]
		then
			if [ ! -e $ALLOWFILE ]
			then
				print "$ALLOWFILE does not exist." >> log_msg 2>&1
				ice_status=2
				Script_Output
				exit 0
			else
				# ftpusers file must contain SYSACCOUNT
				for ACCOUNT in $SYSACCOUNT
				do
					if [ `grep -c "^$ACCOUNT" $ALLOWFILE` -eq 0 ]	
					then
						if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
						then
							print "$ACCOUNT is not in $ALLOWFILE." >> log_msg 2>&1
							ice_status=2
							Script_Output
							exit 0
						fi
					fi
				done
			fi
			Script_Output
			exit 0
		fi

		if [ -s $ALLOWFILE ]
		then
			#ACCOUNT should not be in ALLOWFILE
			for ACCOUNT in $SYSACCOUNT
			do
				if [ `grep -c "^$ACCOUNT" $ALLOWFILE` -gt 0 ] 
				then
					if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
					then
						cur_val=1
						print "$ACCOUNT is in $ALLOWFILE." >> log_msg 2>&1
						ice_status=2
						Script_Output
						exit 0
					fi
				fi
			done
		else #allow file not there
			if [ -s $DENYFILE ]
			then
				#ACCOUNT should be in DENYFILE
				for ACCOUNT in $SYSACCOUNT
				do
					if [ `grep -c "^$ACCOUNT" $DENYFILE` -eq 0 ]	
					then
						if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
						then
							print "$ACCOUNT is not in $DENYFILE." >> log_msg 2>&1
							ice_status=2
							Script_Output
							exit 0
						fi
					fi
				done
			else
				print "$ALLOWFILE and $DENYFILE do not exist or empty." >> log_msg 2>&1
				ice_status=2
				Script_Output
				exit 0
			fi
		fi
	else #STATUS_ARG is false 
		if [ $SINGLEFILE = TRUE ]
		then
			if [ -e $ALLOWFILE ]
			then
				cur_val=1
				print "$ALLOWFILE exists." >> log_msg 2>&1
				#if file exists, it is not compliance.  
				# No need to check further.
				ice_status=2
				Script_Output
				exit 0
			fi
			Script_Output
			exit 0
		fi

		if [ -s $ALLOWFILE ]
		then 
			#ACCOUNT should be in ALLOWFILE
			for ACCOUNT in $SYSACCOUNT
			do
				if [ `grep -c "^$ACCOUNT" $ALLOWFILE` -eq 0 ]
				then
					if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
					then
						print "$ACCOUNT is not in $ALLOWFILE." >> log_msg 2>&1
						ice_status=2
						Script_Output
						exit 0
					fi
				fi
			done
		else #allow file not there
			if [ -s $DENYFILE ]
			then
				#ACCOUNT should not be in DENYFILE
				for ACCOUNT in $SYSACCOUNT
				do
					if [ `grep -c "^$ACCOUNT" $DENYFILE` -gt 0 ]	
					then
						if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
						then
							cur_val=1
							print "$ACCOUNT is in $DENYFILE." >> log_msg 2>&1
							ice_status=2
							Script_Output
							exit 0
						fi
					fi
				done
			else
				print "$ALLOWFILE and $DENYFILE do not exist or empty." >> log_msg 2>&1
				ice_status=2
				Script_Output
				exit 0
			fi
		fi
	fi
	Script_Output
	exit 0
fi

####################
# Preview/Enforcing
####################
cur_val=
TMPFILE=/etc/security/ice/tmp/tempfile
if [ "$STATUS_ARG" = "true" ]
then 
	if [ $SINGLEFILE = TRUE ]
	then
		if [ ! -e $ALLOWFILE ]
		then
			touch $ALLOWFILE
		fi

		#Add entries in file
		for ACCOUNT in $SYSACCOUNT
		do
			if [ `grep -c "^$ACCOUNT" $ALLOWFILE` -eq 0 ]	
			then
				if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
				then
					if [ ! -e $TMPDIR/$ALLOW ]
					then
						$ECHOPREFIX cp $ALLOWFILE $TMPDIR
					fi
					#add entry
					$ECHOPREFIX echo $ACCOUNT >> $ALLOWFILE
				fi
			fi
		done
		Script_Output
		exit 0
	fi

	if [ -s $ALLOWFILE ]
	then
		#Remove entries from ALLOWFILE
		for ACCOUNT in $SYSACCOUNT
		do
			if [ `grep -c "^$ACCOUNT" $ALLOWFILE` -gt 0 ]
			then
				if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
				then
					if [ ! -e $TMPDIR/$ALLOW ]
					then
						$ECHOPREFIX cp $ALLOWFILE $TMPDIR
					fi
					#remove entry
					$ECHOPREFIX grep -v -x $ACCOUNT $ALLOWFILE > $TMPFILE
					$ECHOPREFIX mv $TMPFILE $ALLOWFILE
				fi
			fi
		done
	fi

	#Add entries in DENYFILE
	if [ ! -e $DENYFILE ]
	then
		touch $DENYFILE
	fi
	for ACCOUNT in $SYSACCOUNT
	do
		if [ `grep -c "^$ACCOUNT" $DENYFILE` -eq 0 ]	
		then
			if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
			then
				if [ ! -e $TMPDIR/$DENY ]
				then
					$ECHOPREFIX cp $DENYFILE $TMPDIR
				fi
				#add entry
				$ECHOPREFIX echo $ACCOUNT >> $DENYFILE
			fi
		fi
	done

else #STATUS_ARG is false
	if [ $SINGLEFILE = TRUE ]
	then
		if [ -e $ALLOWFILE ]
		then
			#Remove entries from file
			for ACCOUNT in $SYSACCOUNT
			do
				if [ `grep -c "^$ACCOUNT" $ALLOWFILE` -gt 0 ]
				then
					if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
					then
						if [ ! -e $TMPDIR/$ALLOW ]
						then
							$ECHOPREFIX cp $ALLOWFILE $TMPDIR
						fi
						#remove entry
						$ECHOPREFIX grep -v -x $ACCOUNT $ALLOWFILE > $TMPFILE
						$ECHOPREFIX mv $TMPFILE $ALLOWFILE
					fi
				fi
			done
		fi
		Script_Output
		exit 0
	fi

	if [ ! -e $ALLOWFILE ]
	then
		touch $ALLOWFILE
	fi
	#Add entries in ALLOWFILE
	for ACCOUNT in $SYSACCOUNT
	do
		if [ `grep -c "^$ACCOUNT" $ALLOWFILE` -eq 0 ]
		then
			if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
			then
				if [ ! -e $TMPDIR/$ALLOW ]
				then
					$ECHOPREFIX cp $ALLOWFILE $TMPDIR
				fi
				#add entry
				$ECHOPREFIX echo $ACCOUNT >> $ALLOWFILE
			fi
		fi
	done

	#Remove entries from DENYFILE 
	if [ -s $DENYFILE ]
	then
		for ACCOUNT in $SYSACCOUNT
		do
			if [ `grep -c "^$ACCOUNT" $DENYFILE` -gt 0 ]	
			then
				if [ `grep -c "^$ACCOUNT" $PASSWDFILE` -gt 0 ]
				then
					if [ ! -e $TMPDIR/$DENY ]
					then
						$ECHOPREFIX cp $DENYFILE $TMPDIR
					fi
					#remove entry
					$ECHOPREFIX grep -v -x $ACCOUNT $DENYFILE > $TMPFILE
					$ECHOPREFIX mv $TMPFILE $DENYFILE
				fi
			fi
		done
	fi
fi

Script_Output
exit 0
