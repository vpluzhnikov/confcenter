# IBM_PROLOG_BEGIN_TAG         
# This is an automatically generated prolog.  
#                            
# $Source: aix710 bos/usr/lib/security/ice/scripts/shellsValidate.sh 1$                         
#                                                           
# COPYRIGHT International Business Machines Corp. 2010,2010              
#                                                                      
# Pvalue: p2 
#Licensed Materials - Property of IBM
#
#Restricted Materials of IBM
#
#US Government Users Restricted Rights - Use, duplication or
#disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Origin: 27
#
# sccsid: $Header: @(#) AIX710_area/1 bos/usr/lib/security/ice/scripts/shellsValidate.sh, libice, aix710, 1020A_710 2010-05-03T14:25:57-05:00$
#
# IBM_PROLOG_END_TAG
#!/usr/bin/ksh

#
#       Description:
#		GEN002120: CAT II
#		GEN002140: CAT II
#           This script validates if /etc/security/login.cfg exists 
#				and also check if shells listed in /etc/passwd are 
#				listed in /etc/security/login.cfg file with the 
#				exception of /usr/bin/false, /bin/false, /dev/null, 
#				/sbin/nologin, (and equivalents), and sdshell.
#		    This script should be run with superuser privileges.
#			This script does not support false input because it 
#			requires removing the login.cfg file and also removing 
#				the shells.

#GEN005000 

INSTALLDIR=/etc/security/ice/scripts
. $INSTALLDIR/iceInit

PREREQ_LIST="bos.rte.date,bos.rte.commands,bos.rte.shell,bos.rte.ILS"

checkPrereq

SHELLPATH=/etc/security
SHELLFILE=login.cfg
PASSWDFILE=/etc/passwd
TMPFILE=/etc/security/ice/tmp/tempfile
TMPFILE1=/etc/security/ice/tmp/tempfile1
TMPFILE2=/etc/security/ice/tmp/tempfile2
if [ -e $SHELLPATH/$SHELLFILE ]
then
	grep "shells = " $SHELLPATH/$SHELLFILE | cut -d \= -f2- | tr ',' "\n" 1>$TMPFILE
fi
SHELLNOTCHECK="/usr/bin/false,/bin/false,/dev/null,/sbin/nologin,sdshell"
echo $SHELLNOTCHECK | tr ',' "\n" 1>$TMPFILE1

cleanup() {
	if [ -e $TMPFILE ]
	then
		$ECHOPREFIX rm $TMPFILE
	fi

	if [ -e $TMPFILE1 ]
	then
		$ECHOPREFIX rm $TMPFILE1
	fi

	if [ -e $TMPFILE2 ]
	then
		$ECHOPREFIX rm $TMPFILE2
	fi

	Script_Output
}

###########
# Checking
###########
if [[ cflag -eq 1 ]];
then
	#Check to see if /etc/security/login.cfg exists
	#GEN002120
	if [ `ls $SHELLPATH | grep -c -x $SHELLFILE` -gt 0 ]
	then
		#File exists
		if [ "$STATUS_ARG" = "false" ]
		then
			cur_val=1
			print "$SHELLPATH/$SHELLFILE exists." >> log_msg 2>&1
			ice_status=2
			cleanup
			exit 0
		fi
	else
		#File does not exist
		if [ "$STATUS_ARG" = "true" ]
		then
			cur_val=0
			print "$SHELLPATH/$SHELLFILE does not exist." >> log_msg 2>&1
			ice_status=2
			cleanup
			exit 0
		fi
	fi


	#Validate shells that are listed in /etc/passwd are listed
	#in /etc/security/login.cfg.
	#GEN002140

	if [ -s $TMPFILE ]
	then
		if [ "$STATUS_ARG" = "true" ]
		then
			while read line
			do
				shellName=`echo $line | cut -d \: -f7`
				if [[ -n "$shellName" ]]
				then
					if [ `grep -c -x $shellName $TMPFILE1` -eq 0 ]
					then
						if [ `grep -c -x $shellName $TMPFILE` -eq 0 ]
						then
							cur_val=0
							print "$shellName does not exist in $SHELLPATH/$SHELLFILE." >> log_msg 2>&1
							ice_status=2
							cleanup
							exit 0
						fi
					fi
				fi
			done < $PASSWDFILE 
		else #STATUS_ARG is false
			while read line
			do
				shellName=`echo $line | cut -d \: -f7`
				if [[ -n "$shellName" ]]
				then
					if [ `grep -c -x $shellName $TMPFILE1` -eq 0 ]
					then
						if [ `grep -c -x $shellName $TMPFILE` -gt 0 ]
						then
							cur_val=1
							print "$shellName exists in $SHELLPATH/$SHELLFILE." >> log_msg 2>&1
							ice_status=2
							cleanup
							exit 0
						fi
					fi
				fi
			done < $PASSWDFILE 
		fi
	else
		#/etc/security/login.cfg does not contain any shells.
		if [ "$STATUS_ARG" = "true" ]
		then
			print "$SHELLPATH/$SHELLFILE does not contain any shell." >> log_msg 2>&1
			ice_status=2
			cleanup 
			exit 0
		fi
	fi
	cleanup
	exit 0
fi

####################
# Preview/Enforcing
####################
cur_val=

createShell() {
	cat <<-! 1>> $SHELLPATH/$SHELLFILE
		usw:	
		    shells = /bin/sh,/bin/bsh,/bin/csh,/bin/ksh,/bin/tsh,/bin/ksh93,/usr/bin/sh,/usr/bin/bsh,/usr/bin/csh,/usr/bin/ksh,/usr/bin/tsh,/usr/bin/ksh93,/usr/bin/rksh,/usr/bin/rksh93,/usr/sbin/uucp/uucico,/usr/sbin/sliplogin,/usr/sbin/snappd
		    maxlogins = 32767
		    logintimeout = 60
		    maxroles = 8
		    auth_type = STD_AUTH
	!

	grep "shells = " $SHELLPATH/$SHELLFILE | cut -d \= -f2- | tr ',' "\n" 1>$TMPFILE
}

createLoginFile() {
	cat <<-! 1> $SHELLPATH/$SHELLFILE
		default:
		    sak_enabled = false
		    logintimes =
		    logindisable = 0
		    logininterval = 0
		    loginreenable = 0
		    logindelay = 0
	!
	createShell
}

if [ "$STATUS_ARG" = "true" ]
then
	if [ ! -e $SHELLPATH/$SHELLFILE ]
	then
		#Create the file
		createLoginFile
	fi

	if [ `grep -c / $TMPFILE` -eq 0 ]
	then
		#/etc/security/login.cfg does not contain any shells.
		#create default shell
		createShell
	fi	

	#If shell not exist, add it
	while read line
	do
		shellName=`echo $line | cut -d \: -f7`
		if [[ -n "$shellName" ]]
		then
			if [ `grep -c -x $shellName $TMPFILE1` -eq 0 ]
			then
				if [ `grep -c -x $shellName $TMPFILE` -eq 0 ]
				then
					#Add this shell
					if [ `grep -c / $TMPFILE` -eq 0 ]
					then
						sed "/shells =/s|$|$shellName|" $SHELLPATH/$SHELLFILE 1>$TMPFILE2
						#cp to TMPFILE so that the next check will be valid
						cp $TMPFILE2 $TMPFILE
					else
						sed "/shells =/s|$|,$shellName|" $SHELLPATH/$SHELLFILE 1>$TMPFILE2
					fi
					if [ ! -e $TMPDIR/$SHELLFILE ]
					then
						$ECHOPREFIX cp $SHELLPATH/$SHELLFILE $TMPDIR
					fi
					$ECHOPREFIX mv $TMPFILE2 $SHELLPATH/$SHELLFILE
				fi
			fi
		fi
	done < $PASSWDFILE 

else #STATUS_ARG is false
	#We don't support false in this script
	print "Disabled or false option is not supported." >> log_msg 2>&1
fi

cleanup
exit 0
