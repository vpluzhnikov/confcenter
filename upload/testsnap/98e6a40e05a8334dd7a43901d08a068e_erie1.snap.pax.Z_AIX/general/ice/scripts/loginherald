# IBM_PROLOG_BEGIN_TAG         
# This is an automatically generated prolog.  
#                            
# $Source: aix71B bos/usr/lib/security/ice/scripts/loginherald.sh 1$                         
#                                                           
# COPYRIGHT International Business Machines Corp. 2010,2010              
#                                                                      
# Pvalue: p2 
#Licensed Materials - Property of IBM
#
#Restricted Materials of IBM
#
#US Government Users Restricted Rights - Use, duplication or
#disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Origin: 27
#
# sccsid: $Header: @(#) AIX71B_area/1 bos/usr/lib/security/ice/scripts/loginherald.sh, libice, aix71B, 1026A_71B 2010-06-11T20:56:29-05:00$
#
# IBM_PROLOG_END_TAG
#!/usr/bin/ksh
#     Description:
#	GEN000400: CATII
#	GEN000420: CATII
#        This script sets the herald value in the default stanza of
#        /etc/security/login.cfg file, if it's not been set and 
#        the current locale is English. For default level security,
#        it removes the herald attribute from default stanza.  
#        This script should be run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH

###
#Print Usage
###

Usage()  {
    print "usage: \n
   loginherald -{c|e|p}[v] herald toggle\n" >> log_msg 2>&1
}

###
#Output from Script to the Native Library
###
Script_Output() {
        print -n "$cur_val%$ice_status%"
        cat log_msg
        print
}

###
#Initialize the Script Output variables
###
cur_val=0        #cur_val is 0=disabled|1=enabled
ice_status=0    #ice_status is 0=compliant|1=error|2=noncompliant
print -n > log_msg 2>&1

###
#Process arguments
###

#check mode
cflag=0
#Enforce mode
eflag=0
#Preview mode
pflag=0
#Verbose mode
vflag=0

while getopts :cevp OPT
do
    case $OPT in
        c)      cflag=1;;
        e)      eflag=1;;
        v)      vflag=1;;
        p)      pflag=1;;
        ?|:)    Usage
        Script_Output
        exit 1;;
    esac
done

shift $(($OPTIND -1))

#Harvest arguments
HERALD_MSG=$2
HERALD_STATUS=$1

#Need 2 arguments
if [ $# -ne 2 ] || ( [ $1 != "true" ] && [ $1 != "false" ] )
then
    ice_status=1
    print "Need two arguments..." >> log_msg 2>&1
    Usage
    Script_Output
    exit 1
fi


# Preview mode set-up
if [[ pflag -eq 1 ]];
then
    ECHOPREFIX="echo"
else
    ECHOPREFIX=""
fi

# -c, -e and -p mutually exclusive
((chkflg=cflag+eflag+pflag))
if [[ chkflg -ne 1 ]];
then
    Usage
    Script_Output
    exit 1
fi

PREREQ=/etc/security/ice/scripts/chkprereq
PREREQ_LIST="bos.rte.security,bos.rte.date,bos.rte.commands,bos.rte.ILS,bos.rte.shell"

$ECHOPREFIX $PREREQ $PREREQ_LIST >> log_msg 2>&1

if [ $? -eq 1 ]
then
    print "Prereqs needed: " $PREREQ_LIST >> log_msg 2>&1
        ice_status=1
        Script_Output
    exit 1
fi

# Check whether the current locale is English or not
curloc=`grep "[ \t]*LANG[ \t]*=" /etc/environment|awk -F '=' '{ print $2 }'`
if [ $curloc = "C" ]
then
    isloceng=1    # curernt locale is English
else
    isloceng=0    # current locale is not English
fi

# Get the current herald value
current_herald=$(lssec -f /etc/security/login.cfg -s default -a herald | awk -F '=' '{a=$2; gsub(/^"|\\nlogin: "/,"",a); print a}')

exit_code=0
ssh='/etc/ssh/sshd_config'
ftp='/etc/ftpaccess.ctl'
tn='/etc/security/login.cfg'

check_herald() {
	keyword=$1
	file=$2
	dmn=$3	
	
	$ECHOPREFIX grep "^$dmn" /etc/inetd.conf > /dev/null 2>&1
	rc=$?
	if [ $rc -ne 0 ] ; then	
		$ECHOPREFIX ps -elfo pid,comm | grep $dmn > /dev/null 2>&1
		rc=$?
	fi
	if [ -f $file ] && [ $rc -eq 0 ] ; then
		if [ `grep -i -c "^$keyword" $file` -ne 0 ] ; then
			banner=`grep "^$keyword" $file | awk -F ' ' '{ print $2 }' | sed 's/^[ \t]*//;s/[ \t]*$//'`
			if [ -s $banner ] ; then
				cur_herald=`cat $banner`
			else
				cur_herald=""
			fi
		else
			cur_herald=""
		fi
		case ${cur_herald} in
			""	)	if [ "$HERALD_STATUS" = "true" ] ; then
 		     				print "loginherald.sh: Login herald value is not set for $dmn\n" >> log_msg 2>&1
						ice_status=2
					fi ;;
			*	)	if [ "$HERALD_STATUS" = "false" ] ; then
						print "loginherald.sh: Login herald value is set for $dmn but should not\n" >> log_msg 2>&1
						ice_status=2
					elif [ "$HERALD_STATUS" = "true" ] && [ "$HERALD_MSG" != "$cur_herald" ] ; then
						print "loginherald.sh: Login herald value is not set correctly\n" >> log_msg 2>&1
						ice_status=2
					fi ;;	
		esac
							
	fi
}

set_herald() {
	keyword=$1
	file=$2
	if [ -f $file ] ; then
		if [ "$HERALD_STATUS" = "true" ] ; then
			$ECHOPREFIX grep -v "^$keyword" $file > $file.save
			echo "$keyword /etc/banner" >> $file.save
			$ECHOPREFIX mv $file.save $file
			$ECHOPREFIX touch /etc/banner
			$ECHOPREFIX chmod 640 $file
			echo "$HERALD_MSG" > /etc/banner
		else
			if [ `grep -i -c "^keyword" $file` -ne 0 ] ; then
				banner=`grep "^$keyword" $file | awk -F ' ' '{ print $2 }' | sed 's/^[ \t]*//;s/[ \t]*$//'`
			else
				banner=""
			fi
			$ECHOPREFIX grep -v "^$keyword" $file > $file.save
			$ECHOPREFIX mv $file.save $file
			if [ "$banner" != "" ] && [ -f $banner ] ; then
				$ECHOPREFIX rm $banner
			fi
		fi
	fi
	
	if [ "$keyword" = "Banner" ] ; then
		$ECHOPREFIX ps -elfo pid,comm | grep sshd > /dev/null 2>&1
		if [ $? -eq 0 ] ; then
			$ECHOPREFIX stopsrc -s sshd > /dev/null 2>&1
			$ECHOPREFIX startsrc -s sshd > /dev/null 2>&1
		fi	
	fi
}


if [ $HERALD_STATUS = "true" ]
then
	# Dynamic Security Check
	if [[ cflag -eq 1 ]];
	then
		$ECHOPREFIX check_herald "Banner" $ssh "sshd"
		$ECHOPREFIX check_herald "herald:" $ftp "ftp"
		if [ -z "$current_herald" ]
		then
			print "loginherald.sh: Login herald value is not set on English locale. Current locale is '$curloc'\n" >> log_msg 2>&1
			ice_status=2
		elif [ "$current_herald" != "$HERALD_MSG" ]
		then
			print "loginherald.sh: Current login herald value does not match.\nCurrent value is:$current_herald\n" >> log_msg 2>&1
			ice_status=2
        	fi
	else
		$ECHOPREFIX set_herald "Banner" $ssh
		$ECHOPREFIX set_herald "herald:" $ftp
		$ECHOPREFIX chsec -f /etc/security/login.cfg -s default -a herald="$HERALD_MSG\nlogin: " >> log_msg 2>&1
		if [ $? -ne 0 ]
		then
			print "loginherald.sh: chsec command failed to set Login herald value\n" >> log_msg 2>&1
			exit_code=1 
		else
			cur_val=1
		fi
	fi
elif [ $HERALD_STATUS = "false" ]
then
	if [[ cflag -eq 1 ]];
	then
		$ECHOPREFIX check_herald "Banner" $ssh "sshd"
		$ECHOPREFIX check_herald "herald:" $ftp "ftp"
        	# Dynamic Security Check
        	if [ -n "$current_herald" ] && [ $isloceng -eq 1 ]
        	then
			print "loginherald.sh: Login herald value should be NULL on English locale\n" >> log_msg 2>&1
			ice_status=2
		fi
	else
		$ECHOPREFIX set_herald "Banner" $ssh
		$ECHOPREFIX set_herald "herald:" $ftp
		$ECHOPREFIX chsec -f /etc/security/login.cfg -s default -a herald=  >> log_msg 2>&1
		if [ $? -ne 0 ]
		then
			print "loginherald.sh: chsec command failed to set Login herald value\n" >> log_msg 2>&1
			ice_status=1
			exit_code=1
		fi
    	fi
fi

if [[ cflag -eq 1 ]] ; then
	cur_val=$(lssec -f /etc/security/login.cfg -s default -a herald | awk -F '=' '{a=$2; gsub(/^"|\\nlogin: "/,"",a); print a}')
fi
Script_Output
exit $exit_code
