#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG         
# This is an automatically generated prolog.  
#                            
# $Source: aix710 bos/usr/lib/security/ice/scripts/nfsconfig.sh 1$                         
#                                                           
# COPYRIGHT International Business Machines Corp. 2010,2010              
#                                                                      
# Pvalue: p2 
#Licensed Materials - Property of IBM
#
#Restricted Materials of IBM
#
#US Government Users Restricted Rights - Use, duplication or
#disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Origin: 27
#
# sccsid: $Header: @(#) AIX710_area/1 bos/usr/lib/security/ice/scripts/nfsconfig.sh, libice, aix710, 1010A_710 2010-03-02T17:21:31-06:00$
#
# IBM_PROLOG_END_TAG
#       COMPONENT_NAME: (ICE) nfsconfig.sh
#       FUNCTIONS:      None
#       ORIGINS:        27
#
#       Syntax:
#               nfsconfig.sh -{c|e|p}[v] lname toggle 
#       Parameters:
#               -c      - Check mode
#               -e      - Enforce mode
#               -p      - Preview mode
#               -v      - verbose mode (unimplemented)
#               lname  -  ice_name
#		toggle	-	Boolean
#				false => Disable
#				true  => Enable
#
#       OUTPUT:
#               0       - success
#               1       - check/enforce failure
#               2       - usage error
#
#	Description		
#		 This script removes NFS mounts, disables NFS,
#		removes NFS start up script from /etc/inittab
#	        Otherwise, it exports all the
#		directories listed in /etc/exportfs and adds
#		an entry to inittab file to execute /etc/rc.nfs
#		file on system restart and executes the /etc/rc.nfs
#		immediately.
#		This script should be run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH
exec 2>&1

###
#Print Usage
###
Usage() {
	ice_status=1
	print "usage: \n
   nfsconfig.sh -{c|e|p}[v] rule_name toggle\n" >> log_msg 2>&1
}

###
#Output from Script to the Native Library
###
Script_Output() {
	print -n "$cur_val%$ice_status%"
	cat log_msg
	print
}

###
#Process arguments
###

#Check mode
cflag=0
#Enforce mode
eflag=0
#Preview mode
pflag=0
#Verbose mode
vflag=0

###
#Initialize the Script Output variables
###
cur_val=0
ice_status=0
print -n > log_msg 2>&1

while getopts :cevp OPT
do
        case $OPT in
                c)      cflag=1;;
                e)      eflag=1;;
                v)      vflag=1;;
                p)      pflag=1;;
                ?|:)    Usage
			Script_Output
                        exit 1;;
        esac
done
shift $(($OPTIND -1))

#Enable Verbose
if [[ vflag -eq 1 ]];
then
	set -x
fi

#Need 2 arguments
if [[ $# -ne 2 ]];
then
        Usage
	Script_Output
        exit 1 
fi

# -c, -e and -p mutually exclusive
((chkflg=cflag+eflag+pflag))
if [[ chkflg -ne 1 ]];
then
        Usage
	Script_Output
        exit 1 
fi

RULE_NAME=$1
STATUS_ARG=$2

#Toggle argument must be true or false
if ( [ "$STATUS_ARG" != "true" ] && [ "$STATUS_ARG" != "false" ] )
then
	print "Toggle must be true or false" >> log_msg 2>&1
	Usage
	Script_Output
	exit 1
fi

# Preview mode set-up
if [[ pflag -eq 1 ]];
then
        ECHOPREFIX="echo"
else
        ECHOPREFIX=""
fi

PREREQ=/etc/security/ice/scripts/chkprereq

$ECHOPREFIX $PREREQ \
"bos.rte,bos.net.nfs.client"

if [ $? -ne 0 ]
then
        print "prereq missing... \n" >> log_msg 2>&1
	Script_Output
        exit 1
fi

# Check whether any of biod, nfsd, rpc.mountd, rpc.statd or rpc.lockd daemons are running
dmnrunning()
{
flag=0					# None of the daemons is running
for dmn in "biod" "nfsd" "rpc.mountd" "rpc.statd" "rpc.lockd"
do
	$ECHOPREFIX ps -elfo pid,comm | grep -w $dmn 2>&1 >/dev/null 
	if [ $? -eq 0 ]
	then
		flag=`expr $flag + 1`	# Daemon $dmn is running
	fi
done
return $flag				# Return the number of daemons running
}

# Determine whether NFS subsystem is enabled from startup
# 0-NFS is enabled on startup, 1-NFS not enabled on start up
$ECHOPREFIX lsitab rcnfs 2>&1 >/dev/null 
rc=$?

dmnrunning
rc2=$?

if ( [ $rc -eq 0 ] || [ $rc2 -ne 0 ] ) && [[ cflag -eq 1 ]];
then
	cur_val=1
fi

if [ $STATUS_ARG = "false" ]
then
	# Get the directories that are currently exported.
	# Some directoies could be exported with "exportfs -i" command,
	# which are not listed in the /etc/exports file.	
	list=`exportfs | awk '{if(match($0,"nothing exported")!=0) exit;\
 else printf("%s ", $1)}'`

	# Dynamic Security Report
	if [[ cflag -eq 1 ]];
	then
		if [ -z "$list" ] && [ $rc -ne 0 ] && [ $rc2 -eq 0 ]
		then
			Script_Output
			exit 0			# Every thing is fine
		fi	
		if [ -n "$list" ]
		then
			print "nfsconfig.sh:\
 There are few NFS directories exported\n" >> log_msg 2>&1
			ice_status=2
		fi	
		if [ $rc -eq 0 ]
		then
			print "nfsconfig.sh:\
 NFS subsystem is enabled on startup\n"  >> log_msg 2>&1
			ice_status=2
		fi	
		if [ $rc2 -eq 5 ]
		then	
			print "nfsconfig.sh:\
 Daemon biod/nfsd/rpc.mountd/rpc.statd/rpc.lockd is running\n" >> log_msg 2>&1
			ice_status=2
		fi
		Script_Output
		exit 0
	fi

	# Get the directories that are currently exported.
	# Some directoies could be exported with "exportfs -i" command,
	# which are not listed in the /etc/exports file.
	
	$ECHOPREFIX exportfs | grep -v "nothing exported" | awk -F "-" '{if(NF>1)\
 {print $1 " -o " $2}else{ print $1 }}'|while read exp
	do
		$ECHOPREFIX exportfs -i $exp >> log_msg 2>&1
	done
	
	# unexport all the directories 
	$ECHOPREFIX exportfs -ua >> log_msg 2>&1
	if [ $? -ne 0 ]
	then
		print "nfsconfig.sh:\
 There are few NFS directories exported\n" >> log_msg 2>&1
		Script_Output
		exit 1
	fi

	# Disable NFS entry in /etc/inittab, if it's enabled
	if [ $rc -eq 0 ]
	then
		# remove script /etc/rc.nfs from /etc/inittab
		$ECHOPREFIX rmnfs -I >> log_msg 2>&1
		if [ $? -ne 0 ]
		then
			print "nfsconfig.sh:\
 NFS subsystem is enabled on startup\n" >> log_msg 2>&1
			Script_Output
			exit 1
		fi	
	fi
	
	errflg=0
	# Stop the NFS daemons, if any are running
	for dmn in "biod" "nfsd" "rpc.mountd" "rpc.statd" "rpc.lockd"
	do
		ps -elfo pid,comm | grep -w $dmn >> log_msg 2>&1
		if [ $? -eq 0 ]
		then
			$ECHOPREFIX stopsrc -s $dmn >> log_msg 2>&1
			if [ $? -ne 0 ]
			then
				errflg=1
			fi
		fi
	done
	if [ $errflg -eq 1 ]
	then
		Script_Output
		exit 1
	fi
else
	if [ -f /etc/exports ]
	then
		exp=`exportfs | grep -v "nothing exported" | awk '{printf("%s ",$1)}'`
		
		if [ "$exp" != "" ]
		then
			nexp=`awk -v list="$exp" '/^[\t ]*[^#]+/\
 { if(match(list,$1)==0 && match($2,"(-nfsroot)|(-nfspublic)")==0)\
 { if(nexp=="") nexp=$1; else nexp=nexp " " $1;}}END{printf("%s",nexp)}'\
 /etc/exports`
		else
			nexp=`awk '/^[\t ]*[^#]+/\
 { if(match($2,"(-nfsroot)|(-nfspublic)")==0){if(nexp=="") nexp=$1;\
 else nexp=nexp " " $1;}}END{printf("%s",nexp)}' /etc/exports`
		fi
	fi

	# check mode setup 
	if [[ cflag -eq 1 ]]; 
	then
		if [ -z "$nexp" ] && [ $rc -eq 0 ] && [ $rc2 -eq 5 ]
		then
			Script_Output
			exit 0			# Every thing is fine
		fi	
		if [ -n "$nexp" ]
		then
			print "nfsconfig.sh:\
 Entries in /etc/exports are not exported \n" >> log_msg 2>&1
			ice_status=2
		fi	
		if [ $rc -ne 0 ]
		then
			print "nfsconfig.sh:\
 NFS subsystem is not enabled on startup\n" >> log_msg 2>&1
			ice_status=2
		fi	
		if [ $rc2 -ne 5 ]
		then
			print "nfsconfig.sh:\
 Daemon biod/nfsd/rpc.mountd/rpc.statd/rpc.lockd is not running\n" >> log_msg 2>&1
			ice_status=2
		fi
		Script_Output
		exit 0
	fi

	if [ -f /etc/exports ]
	then
		if [ "$nexp" != "" ]
		then
			$ECHOPREFIX exportfs -ua  $nexp >> log_msg 2>&1
		fi
		 
		# export all the directories listed in the exports file
		$ECHOPREFIX exportfs -a >> log_msg 2>&1
		if [ $? -ne 0 ]
		then
			print "nfsconfig.sh:\
 Entries in /etc/exports are not exported \n" >> log_msg 2>&1
			Script_Output
			exit 1
		fi
	fi

	# Enable NFS entry in /etc/inittab, if it's disabled
	if [ $rc -ne 0 ]
	then
		# Add an entry to the inittab file to execute the /etc/rc.nfs
		# script on system restart.
		$ECHOPREFIX mknfs -I >> log_msg 2>&1
		if [ $? -ne 0 ]
		then
			print "nfsconfig.sh:\
 NFS subsystem is not enabled on startup\n" >> log_msg 2>&1
			Script_Output
			exit 1
		fi	
	fi

	errflg=0
	# Start the NFS daemons, if they are not running
	for dmn in "portmap" "biod" "nfsd" "rpc.mountd" "rpc.statd" "rpc.lockd"
	do
		$ECHOPREFIX ps -elfo pid,comm | grep -w $dmn >> log_msg 2>&1
		if [ $? -ne 0 ]
		then
			$ECHOPREFIX startsrc -s $dmn >> log_msg 2>&1
			if [ $? -ne 0 ]
			then
				errflg=1	
			fi
		fi	
	done
	if [ $errflg -eq 1 ]
	then
		print "nfsconfig.sh:\
 Daemon biod/nfsd/rpc.mountd/rpc.statd/rpc.lockd is not running\n" >> log_msg 2>&1
		Script_Output
		exit 1
	fi
fi

Script_Output

exit 0

