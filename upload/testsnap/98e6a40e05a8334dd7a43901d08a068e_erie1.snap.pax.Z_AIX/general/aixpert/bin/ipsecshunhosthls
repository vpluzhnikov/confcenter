#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos610 src/bos/usr/lib/security/aixpert/scripts/ipsecshunhosthls.sh 1.3 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2006,2007 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)91	1.3  src/bos/usr/lib/security/aixpert/scripts/ipsecshunhosthls.sh, aixpert, bos610 2/3/07 13:17:48
# IBM_PROLOG_END_TAG 
#	COMPONENT_NAME		: (AIXPERT) ipsecshunhosthls.sh
#	FUNCTIONS		: None
#	ORIGINS			: 27
#
#	Command Line Arguments	: This script expects one command line argument,
#				i.e., rulename.
#				Syntax: ipsecshunhosthls rulename
#
#	OUTPUT			: None
#
#	Description		: This script shuns hosts for 5 minutes,
#				which tries to access unused ports.
#				It dynamically generates undo xml rule.
#				This script should be run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH

# Initialize variables AIXPERT_FIFO, LOG, REPORT, SCPTDIR and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

TMP=/etc/security/aixpert/tmp/ipsecshunhosthls
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if [ $# -ne 1 ]
then
	dspmsg -s 12 aixpert.cat 1 "Usage: ipsecshunhosthls rulename\n"
	exit 1
fi

# exit success for Dynamic check securiy
report=`echo $AIXPERT_CHECK_REPORT`
if [ "$report" = "1" ]
then
	exit 0
fi

# echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

# Determine whether IPSec is enabled or not.
ipv4=`lsdev -Cc ipsec|grep ipsec_v4|awk '{print $2}'`
ipv6=`lsdev -Cc ipsec|grep ipsec_v6|awk '{print $2}'`

# Get the source ip(version 4) address of the host
# Sometimes this address might have more than one entry, when we have multiple interfaces
hostipv4=`ifconfig -a|grep "inet "|awk '{print $2}'|grep -v -w "127.0.0.1"`

# Get the source ip(version 6) address of the host
hostipv6=`ifconfig -a|grep "inet6 "|awk '{print $2}'|awk -F "/" '{print $1}'|\
awk -F "%" '{print $1}'|grep -v -w "::1"`

# Get the list of open ports in LISTEN mode
openports=$(netstat -an|grep -i listen|awk '{if (match($4,"\\*\.") != 0)\
 {gsub("\\*\.","",$4); print $4}}')

# List of unused ports, when a host tries to connect to these ports,
# Shun that particular host for 5 minutes
uusdports="11 13 19 25 43 67 69"

# A value of 0 indicates that Undo rule need not be created.
# This variable will be set later in the script if there is anything to be undone
undo=0

# All these filter rules will be added before the existing rules in the filter rule table
if [ "$ipv4" = "Available" ]
then
	# Add filter rules to shun hosts which tries to send packets to
	# unused ports on $hostipv4
	for i in ${hostipv4}
	do
		for j in ${uusdports}
		do
			# Check whether port specified by $j is in listen mode
			echo $openports|grep -w $j

			if [ $? -ne 0 ]		# The port $j is not in listen mode
			then
				undo=1
				# Shun all the hosts which tries to access this port
				genfilt -v4 -n 2 -a H -s 0.0.0.0 -m 0.0.0.0 -d $i\
 -M 255.255.255.255 -O eq -P $j -w I -D "AIXpert:IPv4:ShunHost$i$j" -e 300
				if [ $? -ne 0 ]
				then
					dspmsg -s 12 aixpert.cat 2\
 "ipsecshunhosthls.sh: genfilt failed to add filter for IPSec Version 4\n"
					exit 1
				fi
			fi
		done
	done

	# Activate the IPSec v4 filters added.
	mkfilt -v4 -u
	if [ $? -ne 0 ]
	then
		dspmsg -s 12 aixpert.cat 3 "ipsecshunhosthls.sh:\
 mkfilt failed to activate filter rules for IPSec Version 4\n"
		exit 1
	fi
fi

if [ "$ipv6" = "Available" ]
then
	# Add filter rules to shun hosts which tries to send packets
	# to unused ports on $hostipv6
	for i in ${hostipv6}
	do
		for j in ${uusdports}
		do
			# Check whether port specified by $j is in listen mode
			echo $openports|grep -w $j

			if [ $? -ne 0 ]		# The port $j is not in listen mode
			then
				undo=1
				# Shun all the hosts which tries to access this port
				genfilt -v6 -n 1 -a H -s 0:0:0:0:0:0:0:0\
 -m 0 -d $i -M 128 -O eq -P $j -w I -D "AIXpert:IPv6:ShunHost$i$j" -e 300
				if [ $? -ne 0 ]
				then
					dspmsg -s 12 aixpert.cat 4\
 "ipsecshunhosthls.sh: genfilt failed to add filter for IPSec Version 6\n"
					exit 1
				fi
			fi
		done
	done

	# Activate the IPSec v6 filters added.
	mkfilt -v6 -u
	if [ $? -ne 0 ]
	then
		dspmsg -s 12 aixpert.cat 5 "ipsecshunhosthls.sh:\
 mkfilt failed to activate filter rules for IPSec Version 6\n"
		exit 1
	fi
fi

if [ $undo -eq 1 ]
then
	# Check if UNDOXML file has <AIXPertUndo> tag or not
	empty=`grep "^<AIXPertUndo>" $UNDOXML`
	if [ "$empty" = "" ]
	then
		echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
	fi

	# Get the rulename and put it in undo rule
	name=`echo $AIXPERT_NAME`
	# Get the rule description & pass it to undo rule
	desc=`echo $AIXPERT_DESC`

	# Add an undo XML rule to the file $UNDOXML
	awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>/etc/security/aixpert/bin/ipsecundo\
</AIXPertCommand>\n\t\t<AIXPertArgs>ShunHost</AIXPertArgs>\n\
\t\t<AIXPertGroup>IPSec Filter Rules</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;\
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >>$TMP$PID
	mv $TMP$PID $UNDOXML
fi

exit 0
