#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos610 src/bos/usr/lib/security/aixpert/scripts/chetcftpusers.sh 1.5 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2006,2007 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)80	1.5  src/bos/usr/lib/security/aixpert/scripts/chetcftpusers.sh, aixpert, bos610 3/15/07 06:08:12
# IBM_PROLOG_END_TAG 
#	COMPONENT_NAME		: (AIXPERT) chetcftpusers.sh
#	FUNCTIONS		: None
#	ORIGINS			: 27
#
#	Command Line Arguments	: This script expects two command line arguments,
#				First argument should be either "a" or "r".
#				Second argument should be rulename.
#				Syntax: chetcftpusers {a|r} rulename
#
#	OUTPUT			: None
#
#	Description		: This script adds/removes the "root" entry to
#				/etc/ftpusers file. It dynamically generates
#				undo rules and xml rule. This script should be
#				run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH

# Initialize variables AIXPERT_FIFO, LOG, REPORT, SAVE and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

TMP=/etc/security/aixpert/tmp/chetcftpusers
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if [ $# -ne 2 ] || ( [ $1 != "a" ] && [ $1 != "r" ] )
then
	dspmsg -s 29 aixpert.cat 1 "Usage: chetcftpusers {a|r} rulename\n"
	exit 1
fi

# echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

# A value of 0 indicates that Undo rule need not be created. This variable
# will be set later in the script if there is anything to be undone
undo=0

# Check whether AIXPERT_CHECK_REPORT environment variable's value is set or not.
report=`echo $AIXPERT_CHECK_REPORT`

if [ "$1" = "a" ]
then
	if [ -e /etc/ftpusers ]
	then
		grep root /etc/ftpusers
		if [ $? -ne 0 ]
		then
			# Dynamic Security Check
			if [ "$report" = "1" ]
			then
				dspmsg -s 29 aixpert.cat 2 "chetcftpusers.sh:\
 /etc/ftpusers file does not have root entry in it\n" >>$REPORT
				dspmsg -s 29 aixpert.cat 2 "chetcftpusers.sh:\
 /etc/ftpusers file does not have root entry in it\n" >>$AIXPERT_FIFO
				exit 1
			else
				undo=1
				time=`date +%s`
				# Take backup of the file
				cp /etc/ftpusers $SAVE/chetcftpusers_ftpusers.$time

				# Add "root" entry in /etc/ftpusers file
				echo "root" >>/etc/ftpusers
				echo "mv $SAVE/chetcftpusers_ftpusers.$time\
 /etc/ftpusers" >>$TMP$PID
			fi
		else
			# for undo consistency
			if [ "$report" != "1" ]
			then
				undo=1
				time=`date +%s`
				# Take backup of the file
				cp /etc/ftpusers $SAVE/chetcftpusers_ftpusers.$time
				echo "mv $SAVE/chetcftpusers_ftpusers.$time\
 /etc/ftpusers" >>$TMP$PID
			fi
		fi
	else
		# Dynamic Security Check
		if [ "$report" = "1" ]
		then
			dspmsg -s 29 aixpert.cat 3 "chetcftpusers.sh:\
 /etc/ftpusers file does not exist\n" >>$REPORT
			dspmsg -s 29 aixpert.cat 3 "chetcftpusers.sh:\
 /etc/ftpusers file does not exist\n" >>$AIXPERT_FIFO
			exit 1
		else
			undo=1
			time=`date +%s`
			echo "root" >>/etc/ftpusers
			echo "rm /etc/ftpusers" >>$TMP$PID
		fi
	fi
else
	if [ -e /etc/ftpusers ]
	then
		# Dynamic Security Check
		if [ "$report" = "1" ]
		then
			dspmsg -s 29 aixpert.cat 4 "chetcftpusers.sh:\
 /etc/ftpusers file exists\n" >>$REPORT
			dspmsg -s 29 aixpert.cat 4 "chetcftpusers.sh:\
 /etc/ftpusers file exists\n" >>$AIXPERT_FIFO
			exit 1
		else
			undo=1
			time=`date +%s`
			mv /etc/ftpusers $SAVE/chetcftpusers_ftpusers.$time
			echo "mv $SAVE/chetcftpusers_ftpusers.$time\
 /etc/ftpusers" >>$TMP$PID
		fi
	fi
fi

# Generate an undo rule
if [ $undo -eq 1 ]
then
	# Create Undo script $SCPTDIR/Undo$2$time
	echo "#!/usr/bin/ksh\nexport PATH=/usr/bin:/usr/sbin:\$PATH\n" >$SCPTDIR/Undo$2$time
	echo "exec 1>>$LOG\nexec 2>&1\nset -x\ndate\necho " '$0' >>$SCPTDIR/Undo$2$time
	cat $TMP$PID >>$SCPTDIR/Undo$2$time
	rm  $TMP$PID
	chmod ug+x $SCPTDIR/Undo$2$time

	# Check if UNDOXML file has <AIXPertUndo> tag or not
	empty=`grep "^<AIXPertUndo>" $UNDOXML`
	if [ "$empty" = "" ]
	then
		echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
	fi

	# Get the rulename and put it in undo rule
	name=`echo $AIXPERT_NAME`
	# Get the rule description & pass it to undo rule
	desc=`echo $AIXPERT_DESC`

	# Add an undo XML rule to the file $UNDOXML
	awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>$SCPTDIR/Undo$2$time</AIXPertCommand>\n\
\t\t<AIXPertArgs/>\n\t\t<AIXPertGroup>Miscellaneous Rules</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;\
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >>$TMP$PID
	mv $TMP$PID $UNDOXML
fi

exit 0
