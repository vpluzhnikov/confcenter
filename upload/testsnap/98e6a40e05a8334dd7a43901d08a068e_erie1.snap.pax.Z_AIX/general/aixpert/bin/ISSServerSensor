#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos61H src/bos/usr/lib/security/aixpert/scripts/ISSServerSensor.sh 1.2 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2009 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)95	1.2  src/bos/usr/lib/security/aixpert/scripts/ISSServerSensor.sh, aixpert, bos61H, 0916A_61H 4/13/09 15:58:29
# IBM_PROLOG_END_TAG 
#       COMPONENT_NAME          : (AIXPERT) ISSServerSensor.sh
#       FUNCTIONS               : None
#       ORIGINS                 : 27
#
#       Command Line Arguments  : The script takes 2 command line arguments.
#                               The first argument should be either
#                               "h" or "m" or "l" or "d". The second argument
#                               should be the rule name.
#
#                               Syntax: ISSServerSensor {h|m|l|d} [rulename]
#
#       OUTPUT                  : None
#
#       Description             : This script sets ISS RealSecure's Server Sensor
#				policies and starts or stops the Server Sensor daemon.
#				The same script works like undo script, when the
#				last command line argument is not specified.

export PATH=/usr/bin:/usr/sbin:$PATH

# Initialize variables AIXPERT_FIFO, LOG, REPORT, SAVE and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

# Initialize ISS ServerSensor variables as well
. /etc/realsecure/config

TMP=/etc/security/aixpert/tmp/ISSServerSensor
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if ( [ $# -lt 1 ] || [ $# -gt 2 ] ) || \
	( [ $1 != "h" ] && [ $1 != "m" ] && [ $1 != "l" ] && [ $1 != "d" ] )
then
        dspmsg -s 41 aixpert.cat 1 "Usage: ISSServerSensor {h|m|l|d} [rulename]\n"
        exit 1
fi

# echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

# A value of 0 indicates that Undo rule need not be created. This variable
# will be set later in the script if there is anything to be undone
undo=0

# Check whether AIXPERT_CHECK_REPORT environment variable's value is set or not.
report=`echo $AIXPERT_CHECK_REPORT`

# Check the current policy applied on the system
curpolicy=`$RSBASE/SetSecurityLevel.sh show | awk '{print $NF}'`

# Desired policy to be set
despol=$1
# despolicy is for printing informational messages, in case of errors
case "$despol"
in
        h) despolicy="High";;
        m) despolicy="Medium";;
        l) despolicy="Low";;
        d) despolicy="none";;
esac

# check if the ServerSensor daemon is active or not.
ps -A|grep issDaemon
dmnnotactiv=$?	# variable to check if the daemon is inoperative
if [ $dmnnotactiv -eq 1 ]
then
	curpolicy="none"
fi

# convert the current policy from "high/medium/low/unset" to h/m/l/d form
# this is needed for filling AIXPertArgs in the undo XML rule
case "$curpolicy"
in
	[Hh]igh)	curpol="h";;
	[Mm]edium)	curpol="m";;
	[Ll]ow)		curpol="l";;
	none)		curpol="d";;
esac

if [ $# -eq 2 ]
then
	if [ "$report" = "1" ]
	then
		if [ "$curpol" = "$despol" ]
		then
			exit 0
		else
			dspmsg -s 41 aixpert.cat 2 "ISSServerSensor.sh:\
 ISS ServerSensor's policy is %s, however it should be %s\n" $curpolicy $despolicy >>$REPORT
			dspmsg -s 41 aixpert.cat 2 "ISSServerSensor.sh:\
 ISS ServerSensor's policy is %s, however it should be %s\n" $curpolicy $despolicy >>$AIXPERT_FIFO
			exit 1
		fi
	else
		if [ "$curpol" = "$despol" ]
		then
			# need to have the undo rule to ensure consistency
			undo=1
		else
			if [ "$despol" = "d" ]
			then
				# stop the SS daemon
				${RSBASE}/realsecure stop
				if [ $? -ne 0 ]
				then
					dspmsg -s 41 aixpert.cat 3 "ISSServerSensor.sh:\
 Failed to stop ISS ServerSensor daemon\n"
					exit 1
				fi
			else
				# change the policy according to the level specified
				${RSBASE}/SetSecurityLevel.sh $despolicy
				if [ $? -ne 0 ]
				then
					dspmsg -s 41 aixpert.cat 4 "ISSServerSensor.sh:\
 Failed to set the ISS ServerSensor policy to %s\n" $despolicy
					exit 1
				fi
				${RSBASE}/realsecure restart
				if [ $? -ne 0 ]
				then
					${RSBASE}/SetSecurityLevel.sh $curpolicy
					dspmsg -s 41 aixpert.cat 5 "ISSServerSensor.sh:\
 Failed to restart ISS ServerSensor daemon\n"
					exit 1
				fi
			fi

			# generate undo rule, only when the policy is set to desired level
			# and the restart of issDaemon succeeds
			undo=1
		fi
	fi
else
	if [ "$despol" = "d" ]
	then
		${RSBASE}/realsecure stop
		if [ $? -ne 0 ]
		then
			dspmsg -s 41 aixpert.cat 3 "ISSServerSensor.sh:\
 Failed to stop ISS ServerSensor daemon\n"
			exit 1
		fi
	else
		# change the policy according to the level specified
		${RSBASE}/SetSecurityLevel.sh $despolicy
		if [ $? -ne 0 ]
		then
			dspmsg -s 41 aixpert.cat 4 "ISSServerSensor.sh:\
 Failed to set the ISS ServerSensor policy to %s\n" $despolicy
			exit 1
		fi
		${RSBASE}/realsecure restart
		if [ $? -ne 0 ]
		then
			${RSBASE}/SetSecurityLevel.sh $curpolicy
			dspmsg -s 41 aixpert.cat 5 "ISSServerSensor.sh:\
 Failed to restart ISS ServerSensor daemon\n"
			exit 1
		fi
	fi
fi

# Generate an undo rule
if [ $undo -eq 1 ]
then
	# Check if UNDOXML file has <AIXPertUndo> tag or not
        empty=`grep "^<AIXPertUndo>" $UNDOXML`
        if [ "$empty" = "" ]
        then
                echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
        fi

        # Get the rulename and put it in undo rule
        name=`echo $AIXPERT_NAME`
        # Get the rule description & pass it to undo rule
        desc=`echo $AIXPERT_DESC`

        # Add an undo XML rule to the file $UNDOXML
        awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>/etc/security/aixpert/bin/ISSServerSensor</AIXPertCommand>\n\
\t\t<AIXPertArgs>$curpol</AIXPertArgs>\n\
\t\t<AIXPertGroup>ISS RealSecure ServerSensor Policies</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;\
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >>$TMP$PID
        mv $TMP$PID $UNDOXML
fi

exit 0

