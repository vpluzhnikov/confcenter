#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos610 src/bos/usr/lib/security/aixpert/scripts/pwdpolicyenf.sh 1.4 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2007 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)44	1.4  src/bos/usr/lib/security/aixpert/scripts/pwdpolicyenf.sh, aixpert, bos610 2/22/07 03:28:49
# IBM_PROLOG_END_TAG 
#       COMPONENT_NAME          : (AIXPERT) pwdpolicyenf.sh
#       FUNCTIONS               : None
#       ORIGINS                 : 27
#
#       Command Line Arguments  : This script enforces password policies as per
#				  the SOX guidelines.
#
#       OUTPUT                  : None
#
#       Description             : It sets maxage, minage, minlen, mindiff etc.
#				  attributes under password policy enforcement.

export PATH=/usr/bin:/usr/sbin:$PATH

# Initialize variables AIXPERT_FIFO, LOG, REPORT, SCPTDIR and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

CHUSRATTR=/etc/security/aixpert/bin/chusrattr

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if [ $# -ne 0 ]
then
	dspmsg -s 31 aixpert.cat 1 "Usage: pwdpolicyenf\n"
	exit 1
fi

set -x
date
echo $0

TMP=/etc/security/aixpert/tmp/pwdpolicyenf
TMP1=/etc/security/aixpert/tmp/undoxmlppe
PID=$$

report=`echo $AIXPERT_CHECK_REPORT`
if [ "$report" != "1" ]
then
	# Take a backup of UNDOXML
	mv $UNDOXML $TMP1$PID.xml	

	#set maxage to 13
	$CHUSRATTR maxage=13 ALL scbp_maxage
	rc1=$?

	#set histsize to 20
	$CHUSRATTR histsize=20 ALL scbp_histsize
	rc2=$?

	#set minage to 1
	$CHUSRATTR minage=1 ALL scbp_minage
	rc3=$?

	#set minlen to 8
	$CHUSRATTR minlen=8 ALL scbp_minlen
	rc4=$?

	#set minalpha to 6
	#minalpha is set to 4 for other levels of AIXpert settings*
	$CHUSRATTR minalpha=6 ALL scbp_minalpha
	rc5=$?

	#set password warntime to 14
	$CHUSRATTR pwdwarntime=14 ALL scbp_pwdwarntime
	rc6=$?

	#set mindiff to 4
	$CHUSRATTR mindiff=4 ALL scbp_mindiff
	rc7=$?

	# store the temporaty undo file generated in $SAVE/undo.ppe.xml
	mv $UNDOXML $SAVE/undo.ppe.xml

	# replace the original undo.xml in place
	mv $TMP1$PID.xml $UNDOXML

	# $SAVE/undo.ppe.xml will have the undo action to be taken
	# have all these actions in one script, so that they can be
	# undone at one stretch
	echo "#!/usr/bin/ksh\nexport PATH=/usr/bin:/usr/sbin:\$PATH\n"\
 >$SCPTDIR/Undopwdpolicyenf$PID
	echo "exec 1>>$LOG\nexec 2>&1\nset -x\ndate\necho" '$0'\
 >>$SCPTDIR/Undopwdpolicyenf$PID

	# the below awk script reads the undo rules frm tmp undo.xml to get the
	# AIXPertCommand and AIXPertArgs together

	awk -F '>' 'BEGIN {x=0}\
	{\
	if(match($1,"<AIXPertCommand")!=0){\
		x=1;\
		gsub("</AIXPertCommand", "", $2);\
		cmd=$2;\
	}\
	else{\
		if(x)\
		{\
			if(match($1,"<AIXPertArgs")!=0){\
				if(NF<2){\
					print $cmd;\
				}\
				else {\
					gsub("</AIXPertArgs","",$2);\
					print cmd " " $2;\
				}\
			}\
			else {\
				print $cmd;\
			}\
			x=0;\
		}\
	}\
	}' $SAVE/undo.ppe.xml >>$SCPTDIR/Undopwdpolicyenf$PID

	# Grant execute perms on $SCPTDIR/Undopwdpolicyenf$PID
	chmod ug+x $SCPTDIR/Undopwdpolicyenf$PID
	# remove the temporary undo xml file
	rm $SAVE/undo.ppe.xml

	# Check if all password settings are properly applied or not
	if [ $rc1 -ne 0 ] || [ $rc2 -ne 0 ] || [ $rc3 -ne 0 ] || \
[ $rc4 -ne 0 ] || [ $rc5 -ne 0 ] || [ $rc6 -ne 0 ] || [ $rc7 -ne 0 ]
	then
		dspmsg -s 31 aixpert.cat 2 "pwdpolicyenf.sh: failed\
 to enforce the password policies\n"
		# undo the security settings applied
		. $SCPTDIR/Undopwdpolicyenf$PID
		rm $SCPTDIR/Undopwdpolicyenf$PID
		exit 1
	fi

	# write the undo rule for undoing all pwd policies applied
	# this undo rule will be appended to original undo.xml 
	# Check if UNDOXML file has <AIXPertUndo> tag or not
	empty=`grep "^<AIXPertUndo>" $UNDOXML`
	if [ "$empty" = "" ]
	then
		echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
	fi

	# Get the rulename and put it in undo rule
	name=`echo $AIXPERT_NAME`
	# Get the rule description & pass it to undo rule
	desc=`echo $AIXPERT_DESC`

	# Add an undo XML rule to the file $UNDOXML
	awk -v rulepart1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulepart2="\t\t<AIXPertCommand>$SCPTDIR/Undopwdpolicyenf$PID</AIXPertCommand>\n\
\t\t<AIXPertArgs/>\n"\
 -v rulepart3="\t\t<AIXPertGroup>SOX-COBIT Best Practices Security</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;\
 else print rulepart1 rulepart2 rulepart3 "\n" $0}' $UNDOXML >$TMP$PID
	mv $TMP$PID $UNDOXML
else
	#run check report for all rules
	AIXPERT_CHECK_REPORT=1 $CHUSRATTR maxage=13 ALL scbp_maxage
	rc1=$?
	AIXPERT_CHECK_REPORT=1 $CHUSRATTR histsize=20 ALL scbp_histsize
	rc2=$?
	AIXPERT_CHECK_REPORT=1 $CHUSRATTR minage=1 ALL scbp_minage
	rc3=$?
	AIXPERT_CHECK_REPORT=1 $CHUSRATTR minlen=8 ALL scbp_minlen
	rc4=$?
	AIXPERT_CHECK_REPORT=1 $CHUSRATTR minalpha=6 ALL scbp_minalpha
	rc5=$?
	AIXPERT_CHECK_REPORT=1 $CHUSRATTR pwdwarntime=14 ALL scbp_pwdwarntime
	rc6=$?
	AIXPERT_CHECK_REPORT=1 $CHUSRATTR mindiff=4 ALL scbp_mindiff
	rc7=$?
	if [ $rc1 -ne 0 ] || [ $rc2 -ne 0 ] || [ $rc3 -ne 0 ] || \
[ $rc4 -ne 0 ] || [ $rc5 -ne 0 ] || [ $rc6 -ne 0 ] || [ $rc7 -ne 0 ]
	then
		dspmsg -s 31 aixpert.cat 2 "pwdpolicyenf.sh: failed\
 to enforce the password policies\n" >>$REPORT
		dspmsg -s 31 aixpert.cat 2 "pwdpolicyenf.sh: failed\
 to enforce the password policies\n" >>$AIXPERT_FIFO
		exit 1
	fi
fi

exit 0

