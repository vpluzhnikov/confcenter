#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos610 src/bos/usr/lib/security/aixpert/scripts/nfsconfig.sh 1.7 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2006,2007 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)96	1.7  src/bos/usr/lib/security/aixpert/scripts/nfsconfig.sh, aixpert, bos610 4/11/07 12:55:02
# IBM_PROLOG_END_TAG 
#	COMPONENT_NAME		: (AIXPERT) nfsconfig.sh
#	FUNCTIONS		: None
#	ORIGINS			: 27
#
#	Command Line Arguments	: The script takes 2 command line arguments.
#				The first argument should be "e" or "d", i.e.,
#				"enable" or "disable". The second argument
#				should be the rulename.
#				Syntax - nfsconfig {e|d} rulename
#
#	OUTPUT			: None
#
#	Description		: This script removes NFS mounts, disables NFS,
#				removes NFS start up script from /etc/inittab
#				and generates an undo XML rule when the first
#				argument is "e". Otherwise, it exports all the
#				directories listed in /etc/exportfs and adds
#				an entry to inittab file to execute /etc/rc.nfs
#				file on system restart and executes the /etc/rc.nfs
#				immediately and generates an undo rule.
#				This script should be run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH

# Check whether any of biod, nfsd, rpc.mountd, rpc.statd or rpc.lockd daemons are running
dmnrunning()
{
flag=0					# None of the daemons is running
for dmn in "biod" "nfsd" "rpc.mountd" "rpc.statd" "rpc.lockd"
do
	ps -elfo pid,comm | grep -w $dmn
	if [ $? -eq 0 ]
	then
		flag=`expr $flag + 1`	# Daemon $dmn is running
	fi
done
return $flag				# Return the number of daemons running
}

# Initialize variables AIXPERT_FIFO, LOG, REPORT, SCPTDIR and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

TMP=/etc/security/aixpert/tmp/nfsconfig
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if [ $# -ne 2 ] || ( [ "$1" != "e" ] && [ "$1" != "d" ] )
then
        dspmsg -s 17 aixpert.cat 1 "Usage : nfsconfig {e|d} rulename\n"
        exit 1
fi

# echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

echo "#!/usr/bin/ksh\nexport PATH=/usr/bin:/usr/sbin:\$PATH\n" >$TMP$PID
echo "exec 1>>$LOG\nexec 2>&1\nset -x\ndate\necho" '$0' >>$TMP$PID
chmod ug+x $TMP$PID

# Check whether AIXPERT_CHECK_REPORT environment variable is set or not.
report=`echo $AIXPERT_CHECK_REPORT`

# Determine whether NFS subsystem is enabled from startup
# 0-NFS is enabled on startup, 1-NFS not enabled on start up
lsitab rcnfs  2>&1 >/dev/null
rc=$?

if [ "$1" = "d" ]
then
	# Get the directories that are currently exported.
	# Some directoies could be exported with "exportfs -i" command,
	# which are not listed in the /etc/exports file.	
	list=`exportfs | awk '{if(match($0,"nothing exported")!=0) exit;\
 else printf("%s ", $1)}'`

	dmnrunning
	rc2=$?

	# Dynamic Security Report
	if [ "$report" = "1" ]
	then
		rm $TMP$PID
		if [ -z "$list" ] && [ $rc -ne 0 ] && [ $rc2 -eq 0 ]
		then
			exit 0			# Every thing is fine
		elif [ -n "$list" ]
		then
			dspmsg -s 17 aixpert.cat 2 "nfsconfig.sh:\
 There are few NFS directories exportted\n" >>$REPORT
			dspmsg -s 17 aixpert.cat 2 "nfsconfig.sh:\
 There are few NFS directories exportted\n" >>$AIXPERT_FIFO
			exit 1
		elif [ $rc -eq 0 ]
		then
			dspmsg -s 17 aixpert.cat 3 "nfsconfig.sh:\
 NFS subsystem is enabled on startup\n" >>$REPORT
			dspmsg -s 17 aixpert.cat 3 "nfsconfig.sh:\
 NFS subsystem is enabled on startup\n" >>$AIXPERT_FIFO
			exit 1
		else
			dspmsg -s 17 aixpert.cat 4 "nfsconfig.sh:\
 Daemon biod/nfsd/rpc.mountd/rpc.statd/rpc.lockd is running\n" >>$REPORT
			dspmsg -s 17 aixpert.cat 4 "nfsconfig.sh:\
 Daemon biod/nfsd/rpc.mountd/rpc.statd/rpc.lockd is running\n" >>$AIXPERT_FIFO
			exit 1
		fi
	fi

	# Get the directories that are currently exported.
	# Some directoies could be exported with "exportfs -i" command,
	# which are not listed in the /etc/exports file.
	
	exportfs | grep -v "nothing exported" | awk -F "-" '{if(NF>1)\
 {print $1 " -o " $2}else{ print $1 }}'|while read exp
	do
		echo "exportfs -i $exp" >> $TMP$PID
	done
	
	# unexport all the directories 
	exportfs -ua
	if [ $? -ne 0 ]
	then
		. $TMP$PID
		rm $TMP$PID
		dspmsg -s 17 aixpert.cat 2 "nfsconfig.sh:\
 There are few NFS directories exportted\n"
		exit 1
	fi

	# Disable NFS entry in /etc/inittab, if it's enabled
	if [ $rc -eq 0 ]
	then
		# remove script /etc/rc.nfs from /etc/inittab
		rmnfs -I
		if [ $? -ne 0 ]
		then
			. $TMP$PID
			rm $TMP$PID
			dspmsg -s 17 aixpert.cat 3 "nfsconfig.sh:\
 NFS subsystem is enabled on startup\n"
			exit 1
		fi	
		echo "mknfs -I" >> $TMP$PID
	else
		# for undo consistency
		echo "mknfs -I" >> $TMP$PID
	fi
	
	errflg=0
	# Stop the NFS daemons, if any are running
	for dmn in "biod" "nfsd" "rpc.mountd" "rpc.statd" "rpc.lockd"
	do
		ps -elfo pid,comm | grep -w $dmn
		if [ $? -eq 0 ]
		then
			stopsrc -s $dmn
			if [ $? -ne 0 ]
			then
				errflg=1
			fi
			echo "startsrc -s $dmn" >> $TMP$PID
		else
			# for undo consistency
			# need to stop NFS daemon to get back to the normal state
			echo "startsrc -s $dmn" >> $TMP$PID
		fi
	done
	if [ $errflg -eq 1 ]
	then
		. $TMP$PID
		rm $TMP$PID
		exit 1
	fi
else
	if [ -f /etc/exports ]
	then
		exp=`exportfs | grep -v "nothing exported" | awk '{printf("%s ",$1)}'`
		
		if [ "$exp" != "" ]
		then
			nexp=`awk -v list="$exp" '/^[\t ]*[^#]+/\
 { if(match(list,$1)==0 && match($2,"(-nfsroot)|(-nfspublic)")==0)\
 { if(nexp=="") nexp=$1; else nexp=nexp " " $1;}}END{printf("%s",nexp)}'\
 /etc/exports`
		else
			nexp=`awk '/^[\t ]*[^#]+/\
 { if(match($2,"(-nfsroot)|(-nfspublic)")==0){if(nexp=="") nexp=$1;\
 else nexp=nexp " " $1;}}END{printf("%s",nexp)}' /etc/exports`
		fi
	fi

	dmnrunning
	rc2=$?

	# Dynamic Security Report
	if [ "$report" = "1" ]
	then
		rm $TMP$PID
		if [ -z "$nexp" ] && [ $rc -eq 0 ] && [ $rc2 -eq 5 ]
		then
			exit 0			# Every thing is fine
		elif [ -n "$nexp" ]
		then
			dspmsg -s 17 aixpert.cat 5 "nfsconfig.sh:\
 Entries in /etc/exports are not exported \n" >>$REPORT
			dspmsg -s 17 aixpert.cat 5 "nfsconfig.sh:\
 Entries in /etc/exports are not exported \n" >>$AIXPERT_FIFO
			exit 1
		elif [ $rc -ne 0 ]
		then
			dspmsg -s 17 aixpert.cat 6 "nfsconfig.sh:\
 NFS subsystem is not enabled on startup\n" >>$REPORT
			dspmsg -s 17 aixpert.cat 6 "nfsconfig.sh:\
 NFS subsystem is not enabled on startup\n" >>$AIXPERT_FIFO
			exit 1
		elif [ $rc2 -ne 5 ]
		then
			dspmsg -s 17 aixpert.cat 7 "nfsconfig.sh:\
 Daemon biod/nfsd/rpc.mountd/rpc.statd/rpc.lockd is not running\n" >>$REPORT
			dspmsg -s 17 aixpert.cat 7 "nfsconfig.sh:\
 Daemon biod/nfsd/rpc.mountd/rpc.statd/rpc.lockd is not running\n" >>$AIXPERT_FIFO
			exit 1
		fi
	fi

	if [ -f /etc/exports ]
	then
		if [ "$nexp" != "" ]
		then
			echo "exportfs -ua  $nexp" >>$TMP$PID
		fi
		 
		# export all the directories listed in the exports file
		exportfs -a
		if [ $? -ne 0 ]
		then
			dspmsg -s 17 aixpert.cat 5 "nfsconfig.sh:\
 Entries in /etc/exports are not exported \n"
			rm $TMP$PID
			exit 1
		fi
	fi

	# Enable NFS entry in /etc/inittab, if it's disabled
	if [ $rc -ne 0 ]
	then
		# Add an entry to the inittab file to execute the /etc/rc.nfs
		# script on system restart.
		mknfs -I
		if [ $? -ne 0 ]
		then
			dspmsg -s 17 aixpert.cat 6 "nfsconfig.sh:\
 NFS subsystem is not enabled on startup\n"
			. $TMP$PID
			rm $TMP$PID
			exit 1
		fi	
		echo "rmnfs -I" >>$TMP$PID
	else
		# for undo consistency
		# remove nfs entry for inittab for undo action
		echo "rmnfs -I" >>$TMP$PID
	fi

	errflg=0
	# Start the NFS daemons, if they are not running
	for dmn in "portmap" "biod" "nfsd" "rpc.mountd" "rpc.statd" "rpc.lockd"
	do
		ps -elfo pid,comm | grep -w $dmn
		if [ $? -ne 0 ]
		then
			startsrc -s $dmn
			if [ $? -ne 0 ]
			then
				errflg=1	
			fi
			echo "stopsrc -s $dmn" >> $TMP$PID
		else
			# for undo consistency
			echo "stopsrc -s $dmn" >> $TMP$PID
		fi
	done
	if [ $errflg -eq 1 ]
	then
		dspmsg -s 17 aixpert.cat 8 "nfsconfig.sh:\
 Daemon biod/nfsd/rpc.mountd/rpc.statd/rpc.lockd is not running\n"
		. $TMP$PID
		rm $TMP$PID
		exit 1
	fi
fi

# Generate the undo rule
time=`date +%s`
# Move the dynamically created undo script $TMP$PID to $SCPTDIR/Undo$2$time
mv $TMP$PID $SCPTDIR/Undo$2$time
chmod ug+x $SCPTDIR/Undo$2$time
	
empty=`grep "^<AIXPertUndo>" $UNDOXML`
if [ "$empty" = "" ]
then
	echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
fi

# Get the rulename and put it in undo rule
name=`echo $AIXPERT_NAME`
# Get the rule description & pass it to undo rule
desc=`echo $AIXPERT_DESC`

# Add an undo XML rule to the file $UNDOXML
awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>$SCPTDIR/Undo$2$time</AIXPertCommand>\n\
\t\t<AIXPertArgs/>\n\t\t<AIXPertGroup>Disable remote services</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;\
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >$TMP$PID
mv $TMP$PID $UNDOXML

exit 0

