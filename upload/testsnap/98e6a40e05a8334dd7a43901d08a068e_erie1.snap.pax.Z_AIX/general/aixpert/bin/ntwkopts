#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos610 src/bos/usr/lib/security/aixpert/scripts/ntwkopts.sh 1.4 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2006,2007 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)97	1.4  src/bos/usr/lib/security/aixpert/scripts/ntwkopts.sh, aixpert, bos610 2/13/07 16:54:34
# IBM_PROLOG_END_TAG 
#	COMPONENT_NAME		: (AIXPERT) ntwkopts.sh
#	FUNCTIONS		: None
#	ORIGINS			: 27
#
#	Command Line Arguments	: This script expects one or three arguements.
#				  First argument should be in 'Attr=value' format.
#				  where 'Attr' is an user attribute.  'Attr' can be any 
#				  attribute that can be passed to the 'no' command.
#				  Second argument should be either "s" or "d" and
#				  third argument, rulename.
#				  Syntax -  ntwkopts Attr=value [s rulename|d rulename]
#
#	OUTPUT			: None
#
#	Description		: This script when given a single arguement sets the specified
#				  network attribute(Attr)'s value to the given value 'value'.
#				  This serves as undo script.
#				  When "s rulename" is also provided as 2nd and 3rd arguments,
#				  sets the network attribute, Attr's value to the 'value'
#				  specified in the first argument.
#				  When "d rulename" is specified as 2nd and 3rd arguments,
#				  sets the network option to the default value. Here the 
#				  first argument should have "NULL" as value of the attribute,
#				  i.e 'Attr=NULL', as such the value "NULL" is not utilised.
#				  This script should be run with superuser privileges.
#

export PATH=/usr/bin:/usr/sbin:$PATH

# Initialize variables AIXPERT_FIFO, LOG, REPORT and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

TMP=/etc/security/aixpert/tmp/ntwkopts
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if [ $# -ne 1 ] && [ $# -ne 3 ] 
then
	dspmsg -s 18 aixpert.cat 1 "Usage : ntwkopts Attr=value [s rulename|d rulename]\n"
	exit 1
fi

if [ $# -eq 3 ] && [ $2 != "s" ] && [ $2 != "d" ] 
then
	dspmsg -s 18 aixpert.cat 1 "Usage : ntwkopts Attr=value [s rulename|d rulename]\n"
	exit 1
fi

# Determine the network option that has to be modified.
netopt=`echo $1 | awk -F "=" '{print $1; if(NF != 2) exit 1}'`

if [ $? -ne 0 ] || [ "$netopt" = "" ]
then
	dspmsg -s 18 aixpert.cat 1 "Usage : ntwkopts Attr=value [s rulename|d rulename]\n"
        exit 1
fi

# Get the type of $netopt before changing the value.
type=`no -x $netopt|awk -F ',' '{print $(NF-1)}'`

# echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

# A value of 0 indicates that Undo rule need not be created. 
# This variable will be set later in the script if there is anything to be undone
undo=0

# Determine the value that is being assigned to the $netopt
value=`echo $1 | awk -F "=" '{print $2}'`

curvalue=`no -o $netopt | awk '{print $NF}'`
defvalue=`no -d $netopt | awk '{print $NF}'`

# Set back the $netopt attribute's value to the current value, 
# because, the above statement sets $netopt's value to default value.
no -o $netopt="$curvalue"

# Check whether AIXPERT_CHECK_REPORT environment variable is set or not.
report=`echo $AIXPERT_CHECK_REPORT`

if [ $# -eq 3 ] && [ $2 != "d" ]
then
	if [ $curvalue -ne $value ]
	then
		# Dynamic Security Check
		if [ "$report" = "1" ]
		then
			dspmsg -s 18 aixpert.cat 2 "nwwkopts.sh: Network option %s's\
 value should be %d, but it is %d now\n" $netopt $value $curvalue >>$REPORT
			dspmsg -s 18 aixpert.cat 2 "nwwkopts.sh: Network option %s's\
 value should be %d, but it is %d now\n" $netopt $value $curvalue >>$AIXPERT_FIFO
			exit 1
		fi

		if [ "$type" = "R" ]
		then
			# This option is to tune n/w options which can be changed
			# only on a reboot
			opt="ro"
		else
			# This option is to tune n/w options which can be changed
			# dynamically 
			opt="po"
		fi

		# Set the network option $netopt's value to $value
		no -$opt $1
		if [ $? -ne 0 ]
		then
			dspmsg -s 18 aixpert.cat 3 "nwwkopts.sh: Failed to set network\
 option %s's value to %d\n" $netopt $value
			exit 1
		fi
		undo=1
	else
		# for undo consistency
		if [ "$report" != "1" ]
		then
			undo=1
		fi
	fi
elif [ "$2" = "d" ]
then
	if [ $curvalue -ne $defvalue ]
	then
		# Dynamic Security Check
		if [ "$report" = "1" ]
		then
			dspmsg -s 18 aixpert.cat 2 "nwwkopts.sh: Network option %s's\
 value should be %d, but it is %d now\n" $netopt $defvalue $curvalue >>$REPORT
			dspmsg -s 18 aixpert.cat 2 "nwwkopts.sh: Network option %s's\
 value should be %d, but it is %d now\n" $netopt $defvalue $curvalue >>$AIXPERT_FIFO
			exit 1
		fi

		if [ "$type" = "R" ]
		then
			# This option is to tune n/w options which can be changed
			# only on a reboot
			opt="rd"
		else
			# This option is to tune n/w options which can be changed
			# dynamically
			opt="pd"
		fi

		# Set the network option $netopt's value to default value
		no -$opt $netopt
		if [ $? -ne 0 ]
		then
			dspmsg -s 18 aixpert.cat 3 "nwwkopts.sh: Failed to set network\
 option %s's value to %d\m" $netopt $value
			exit 1
		fi
		undo=1
	else
		# for undo consistency
		if [ "$report" != "1" ]
		then
			undo=1
		fi
	fi
else
	if [ "$type" = "R" ]
	then
		# This option is to tune n/w options which can be changed
		# only on a reboot
		opt="ro"
	else
		# This option is to tune n/w options which can be changed
		# dynamically
		opt="po"
	fi

	# This piece of code is used for undo of the network option's settings
	no -$opt $1
	if [ $? -ne 0 ]
	then
		dspmsg -s 18 aixpert.cat 3 "nwwkopts.sh: Failed to set network option\
 %s's value to %d\n" $netopt $value
		exit 1
	fi
fi

if [ $undo -eq 1 ]
then
	# Check if UNDOXML file has <AIXPertUndo> tag or not
	empty=`grep "^<AIXPertUndo>" $UNDOXML`
	if [ "$empty" = "" ]
	then
		echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
	fi

	# Get the rulename and put it in undo rule
	name=`echo $AIXPERT_NAME`
	# Get the rule description & pass it to undo rule
	desc=`echo $AIXPERT_DESC`

	# Add an undo XML rule to the file $UNDOXML		
	awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>/etc/security/aixpert/bin/ntwkopts</AIXPertCommand>\n\
\t\t<AIXPertArgs>$netopt=$curvalue</AIXPertArgs>\n\
\t\t<AIXPertGroup>Tune network options</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >>$TMP$PID
	mv $TMP$PID $UNDOXML
fi

exit 0
