#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos610 src/bos/usr/lib/security/aixpert/scripts/filepermgr.sh 1.1 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2007 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)38	1.1  src/bos/usr/lib/security/aixpert/scripts/filepermgr.sh, aixpert, bos610 4/12/07 10:25:40
# IBM_PROLOG_END_TAG 
#	COMPONENT_NAME		: (AIXPERT) filepermgr.sh
#	FUNCTIONS		: None
#	ORIGINS			: 27
#
#	Command Line Arguments	: The script takes 2 command line arguments.
#				The first argument should be either
#				"h" or "m" or "l" or "d". The second argument
#				should be the rule name.
#
#				Syntax: filepermgr {h|m|l|d} rulename
#
#	OUTPUT			: None
#
#	Description		: This script executes fpm command to remove
#				suid,sgid from the privileged commands.

export PATH=/usr/bin:/usr/sbin:$PATH

# Initialize variables AIXPERT_FIFO, LOG, REPORT, SAVE and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

TMP=/etc/security/aixpert/tmp/filepermgr
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if [ $# -ne 2 ] || ( [ $1 != "h" ] && [ $1 != "m" ] &&  [ $1 != "l" ] && [ $1 != "d" ] )
then
	dspmsg -s 36 aixpert.cat 1 "Usage: filepermgr {h|m|l|d} rulename\n"
	exit 1
fi

# echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

# A value of 0 indicates that Undo rule need not be created. This variable
# will be set later in the script if there is anything to be undone
undo=0

# Check whether AIXPERT_CHECK_REPORT environment variable's value is set or not.
report=`echo $AIXPERT_CHECK_REPORT`

# Query the current fpm status on the machine
# it'll be High, Medium, Low, Default or Customized
fpm_status=`fpm -s|awk '{print $1}'`
# Get the first character of the fpm status, i.e H/M/L/D/C
fpm_stat=`echo $fpm_status|cut -b1 -n`

case "$fpm_stat"
in
	H) fpm_cur_level="high";;
	M) fpm_cur_level="medium";;
	L) fpm_cur_level="low";;
	D) fpm_cur_level="default";;
	C) fpm_cur_level="custom";;
esac

case "$1"
in
	h) fpm_des_status="hH"
	   fpm_des_level="high";;
	m) fpm_des_status="mM"
	   fpm_des_level="medium";;
	l) fpm_des_status="lL"
	   fpm_des_level="low";;
	d) fpm_des_status="dD"
	   fpm_des_level="default";;
esac

if [ "$report" = "1" ]
then
	if expr "$fpm_stat" : "[$fpm_des_status]"
	then
		exit 0
	else
		dspmsg -s 36 aixpert.cat 2 "filepermgr.sh:\
 fpm status is %s, however it should be %s\n" $fpm_cur_level $fpm_des_level >>$REPORT
		dspmsg -s 36 aixpert.cat 2 "filepermgr.sh:\
 fpm status is %s, however it should be %s\n" $fpm_cur_level $fpm_des_level >>$AIXPERT_FIFO
		exit 1
	fi
else
	if expr "$fpm_stat" : "[$fpm_des_status]"
	then
		# echo undo action in $TMP$PID to ensure consistency
		undo=1
		echo "fpm -l $fpm_cur_level >/dev/null 2>&1" >>$TMP$PID
	else
		# change the file perms according to the level specified
		fpm -l $fpm_des_level >/dev/null 2>&1
		if [ $? -ne 32 ] && [ $? -ne 0 ]
		then
			dspmsg -s 36 aixpert.cat 3 "filepermgr.sh:\
 fpm command failed to apply %s level\n" $fpm_des_level
			exit 1
		fi
		# generate undo rule, only when fpm command succeeds
		undo=1
		# Get the file name which contains the fpm
		# settings before fpm -l was run

		fpm_file=`find /var/security/fpm/log/ -type f -ls |\
 tail -1 | awk '{print $NF}'`
		# echo undo action in $TMP$PID
		if [ "$fpm_cur_level" = "custom" ]
		then
			echo "fpm -f $fpm_file >/dev/null 2>&1" >>$TMP$PID
		else
			echo "fpm -l $fpm_cur_level -f $fpm_file >/dev/null 2>&1" >>$TMP$PID
		fi
	fi
fi

# Generate an undo rule
if [ $undo -eq 1 ]
then
	time=`date +%s`
	# Create Undo script $SCPTDIR/Undo$2$time
	echo "#!/usr/bin/ksh\nexport PATH=/usr/bin:/usr/sbin:\$PATH\n" >$SCPTDIR/Undo$2$time
	echo "exec 1>>$LOG\nexec 2>&1\nset -x\ndate\necho " '$0' >>$SCPTDIR/Undo$2$time
	cat $TMP$PID >>$SCPTDIR/Undo$2$time
	rm  $TMP$PID
	chmod ug+x $SCPTDIR/Undo$2$time

	# Check if UNDOXML file has <AIXPertUndo> tag or not
	empty=`grep "^<AIXPertUndo>" $UNDOXML`
	if [ "$empty" = "" ]
	then
		echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
	fi

	# Get the rulename and put it in undo rule
	name=`echo $AIXPERT_NAME`
	# Get the rule description & pass it to undo rule
	desc=`echo $AIXPERT_DESC`

	# Add an undo XML rule to the file $UNDOXML
	awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>$SCPTDIR/Undo$2$time</AIXPertCommand>\n\
\t\t<AIXPertArgs/>\n\t\t<AIXPertGroup>Miscellaneous Rules</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;\
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >>$TMP$PID
	mv $TMP$PID $UNDOXML
fi

exit 0
