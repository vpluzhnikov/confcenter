#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos61H src/bos/usr/lib/security/aixpert/scripts/loginherald.sh 1.6 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2006,2009 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)95	1.6  src/bos/usr/lib/security/aixpert/scripts/loginherald.sh, aixpert, bos61H, 0917A_61H 4/18/09 00:36:31
# IBM_PROLOG_END_TAG 
#	COMPONENT_NAME		: (AIXPERT) loginherald.sh
#	FUNCTIONS		: None
#	ORIGINS			: 27
#
#	Command Line Arguments	: This script expects two command line arguements.
#				The first argument should be either 'a' or 'd' 
#				representing "add" or "delete" of login herald and second
#				argument should be the rulename.
#				Syntax - loginherald {a|d} rulename
#
#	OUTPUT			: None
#
#	Description		: This script sets the herald value in the default stanza 
#				of /etc/security/login.cfg file, if it's not been set and
#				the current locale is English. For default level security,
#				it removes the herald attribute from default stanza.
#				It dynamically generates the undo rules and scripts.
#				This script should be run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH

# Initialize variables AIXPERT_FIFO, LOG, REPORT, SCPTDIR and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

TMP=/etc/security/aixpert/tmp/loginherald
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if [ $# -ne 2 ] || ( [ $1 != "a" ] && [ $1 != "d" ] )
then
	dspmsg -s 16 aixpert.cat 1 "Usage : loginherald {a|d} rulename\n"
        exit 1
fi

# echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

# A value of 0 indicates that Undo rule need not be created. 
# This variable will be set later in the script if there is anything to be undone
undo=0

# Check whether AIXPERT_CHECK_REPORT environment variable is set or not.
report=`echo $AIXPERT_CHECK_REPORT`

if [ $# -eq 2 ] && [ $1 != "d" ]
then
	# Dynamic Security Check
	if [ "$report" = "1" ]
	then
		val=`lssec -f /etc/security/login.cfg -s default -a herald |\
 awk -F "=" '{print $2}'`
		if [ -z "$val" ]
		then
			dspmsg -s 16 aixpert.cat 2 "loginherald.sh:\
 Login herald value is not set on English locale\n" >>$REPORT
			dspmsg -s 16 aixpert.cat 2 "loginherald.sh:\
 Login herald value is not set on English locale\n" >>$AIXPERT_FIFO
			exit 1		# Violation of HLS/MLS/LLS rule
		else
			exit 0
		fi
	fi

	# Generate a dynamic undo rule
	undo=1
	lssec -f /etc/security/login.cfg -s default -a herald | awk -F "=" '{\
 print "chsec -f /etc/security/login.cfg -s default -a herald=" $2 }' >$TMP$PID
	
	# Set the login herald
	chsec -f /etc/security/login.cfg -s default -a herald="Unauthorized use of\
 this system is prohibited.\n\rlogin:"
	if [ $? -ne 0 ]
	then
		dspmsg -s 16 aixpert.cat 4 "loginherald.sh: chsec command failed to\
 set Login herald value\n"
		exit 1
	fi

elif [ $1 = "d" ] 
then
	# Get the current herald value
	herald=`lssec -f /etc/security/login.cfg -s default -a herald|awk -F '=' '{print $2}'`

	# Check whether the current locale is English or not
	curloc=`grep "[ \t]*LANG[ \t]*=" /etc/environment|awk -F '=' '{ print $2 }'`
	eng=`expr match "$curloc" "en_"`

	if [ $eng -eq 3 ]
	then
		isloceng=1	# curernt locale is English
	else
		isloceng=0	# current locale is not English
	fi

	if [  -n "$herald" ] && [ $isloceng -eq 1 ]
	then
		# Dynamic Security Check
		if [ "$report" = "1" ]
		then
			dspmsg -s 16 aixpert.cat 3 "loginherald.sh: Login herald value\
 should be NULL on English locale\n" >>$REPORT
			dspmsg -s 16 aixpert.cat 3 "loginherald.sh: Login herald value\
 should be NULL on English locale\n" >>$AIXPERT_FIFO
			exit 1			# Violation of DLS rule
		fi

		# Generate a dynamic undo rule
		undo=1
		lssec -f /etc/security/login.cfg -s default -a herald | awk -F "=" '{\
 print "chsec -f /etc/security/login.cfg -s default -a herald=" $2 }' >$TMP$PID
		
		# Default rule, remove herald stanza from login.cfg file
		chsec -f /etc/security/login.cfg -s default -a herald=
		if [ $? -ne 0 ]
		then
			dspmsg -s 16 aixpert.cat 4 "loginherald.sh: chsec command failed to\
 set Login herald value\n"
			exit 1
		fi
	else
		# for undo consistency
		if [ "$report" != "1" ]
		then
			undo=1
			lssec -f /etc/security/login.cfg -s default -a herald | awk -F "=" '{\
 print "chsec -f /etc/security/login.cfg -s default -a herald=" $2 }' >$TMP$PID
		fi
	fi
fi

if [ $undo -eq 1 ]
then
	time=`date +%s`
	# Create Undo script $SCPTDIR/Undo$2$time
	echo "#!/usr/bin/ksh\nexport PATH=/usr/bin:/usr/sbin:\$PATH\n" >$SCPTDIR/Undo$2$time
	echo "exec 1>>$LOG\nexec 2>&1\nset -x\ndate\necho" '$0' >>$SCPTDIR/Undo$2$time
	cat $TMP$PID >>$SCPTDIR/Undo$2$time
	rm $TMP$PID
	chmod ug+x $SCPTDIR/Undo$2$time

	# Check if UNDOXML file has <AIXPertUndo> tag or not
	empty=`grep "^<AIXPertUndo>" $UNDOXML`
	if [ "$empty" = "" ]
	then
		echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
	fi

	# Get the rulename and put it in undo rule
	name=`echo $AIXPERT_NAME`
	# Get the rule description & pass it to undo rule
	desc=`echo $AIXPERT_DESC`

	# Add an undo XML rule to the file $UNDOXML	
	awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>$SCPTDIR/Undo$2$time</AIXPertCommand>\n\
\t\t<AIXPertArgs/>\n\t\t<AIXPertGroup>Miscellaneous Rules</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >>$TMP$PID
	mv $TMP$PID $UNDOXML
fi

exit 0
