#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos610 src/bos/usr/lib/security/aixpert/scripts/rmrhostsnetrc.sh 1.5 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2006,2007 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)14	1.5  src/bos/usr/lib/security/aixpert/scripts/rmrhostsnetrc.sh, aixpert, bos610 3/15/07 06:08:18
# IBM_PROLOG_END_TAG 
#	COMPONENT_NAME		: (AIXPERT) rmrhostsnetrc.sh
#	FUNCTIONS		: None
#	ORIGINS			: 27
#
#	Command Line Arguments	: This script expects two arguements.
#				The first argument should be the security level,
#				i.e., "h", "m", "l" or "d".
#				Second argument should be the rule name. 
#				Syntax -  rmrhostsnetrc {h|m|l|d} rulename
#
#	OUTPUT			: None
#
#	Description		: This script depending upon the security level
#				specified, removes the .rhosts and .netrc files
#				from the user's home directories. 
#				This script will generate Undo rules dynamically
#				This script should be run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH

# Check whether .rhosts exists under user's home directory
rhostsexists()
{
	counter=0
	dispuid|while read x
	do
		# Ignore LDAP/NIS user entries
		echo $x | grep ":" >/dev/null 2>&1
		if [ $? -eq 0 ]
		then
			continue;
		fi

		home=`lsuser -a home $x|awk -F "=" '{print $2}'`
		if [ ! -z "$home" ] && [ -e $home/.rhosts ]
		then
			counter=`expr $counter + 1`
			dspmsg -s 25 aixpert.cat 3 "rmrhostsnetrc.sh:\
 .rhosts file exists in user %s's home directory\n" $x >>$REPORT
			dspmsg -s 25 aixpert.cat 3 "rmrhostsnetrc.sh:\
 .rhosts file exists in user %s's home directory\n" $x >>$AIXPERT_FIFO
		fi
	done
	return $counter
}

# Check whether .netrc exists under user's home directory
netrcexists()
{
	counter=0
	dispuid|while read x
	do
		# Ignore LDAP/NIS user entries
		echo $x | grep ":" >/dev/null 2>&1
		if [ $? -eq 0 ]
		then
			continue;
		fi

		home=`lsuser -a home $x|awk -F "=" '{print $2}'`
		if [ ! -z "$home" ] && [ -e $home/.netrc ]
		then
			counter=`expr $counter + 1`
			dspmsg -s 25 aixpert.cat 4 "rmrhostsnetrc.sh:\
 .netrc file exists in user %s's home directory\n" $x >>$REPORT
			dspmsg -s 25 aixpert.cat 4 "rmrhostsnetrc.sh:\
 .netrc file exists in user %s's home directory\n" $x >>$AIXPERT_FIFO
		fi
	done
	return $counter
}

# Initialize variables AIXPERT_FIFO, LOG, REPORT, SAVE, SCPTDIR and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

TMP=/etc/security/aixpert/tmp/rmrhostsnetrc
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if [ $# -ne 2 ] || ( [ $1 != "h" ] && [ $1 != "m" ] && [ $1 != "l" ] &&\
 [ $1 != "d" ] )
then
	dspmsg -s 25 aixpert.cat 1 "Usage : rmrhostsnetrc {h|m|l|d} rulename\n"
        exit 1
fi

# echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

# A value of 0 indicates that Undo rule need not be created. This variable will
# be set later in the script if there is anything to be undone
undo=0

# Check whether AIXPERT_CHECK_REPORT environment variable is set or not.
report=`echo $AIXPERT_CHECK_REPORT`

if [ $# -eq 2 ] && [ $1 != "l" ]
then
	if [ "$report" = "1" ]
	then
		rhostsexists
		rc1=$?
		netrcexists
		rc2=$?

		if [ $rc1 -eq 0 ] && [ $rc2 -eq 0 ]
		then
			exit 0		# Every thing is fine
		else
			exit 1		# .rhosts/.netrc file exists
		fi
	fi

	dispuid|while read x
	do
		# Ignore LDAP/NIS user entries
		echo $x | grep ":" >/dev/null 2>&1
		if [ $? -eq 0 ]
		then
			continue;
		fi

		home=`lsuser -a home $x|awk -F "=" '{print $2}'`

		if [ ! -z "$home" ] && [ -e "$home/.rhosts" ]
		then
			time=`date +%s`
			mv $home/.rhosts $SAVE/rmrhostsnetrc_$x""_rhosts.$time
			echo "mv $SAVE/rmrhostsnetrc_$x""_rhosts.$time\
 $home/.rhosts" >>$TMP$PID
			undo=1
		fi
		if [ ! -z "$home" ] && [ -e "$home/.netrc" ]
		then
			time=`date +%s`
			mv $home/.netrc $SAVE/rmrhostsnetrc_$x""_netrc.$time
			echo "mv $SAVE/rmrhostsnetrc_$x""_netrc.$time\
 $home/.netrc" >>$TMP$PID
			undo=1
		fi
	done

elif [ $1 = "l" ]
then
	if [ "$report" = "1" ]
	then
		if [ ! -e /.rhosts ] && [ ! -e /.netrc ]
		then
			exit 0		# Every thing is fine
		else
			dspmsg -s 25 aixpert.cat 2 "rmrhostsnetrc.sh:\
 Either /.rhosts or /.netrc exists\n" >>$REPORT
			dspmsg -s 25 aixpert.cat 2 "rmrhostsnetrc.sh:\
 Either /.rhosts or /.netrc exists\n" >>$AIXPERT_FIFO
			exit 1 
		fi
	fi

	if [ -e /.rhosts ]
	then
		time=`date +%s`
		mv /.rhosts $SAVE/rmrhostsnetrc_root_rhosts.$time
		echo "mv $SAVE/rmrhostsnetrc_root_rhosts.$time /.rhosts" >>$TMP$PID
		undo=1
	fi
	if [ -e /.netrc ]
	then
		time=`date +%s`
		mv /.netrc $SAVE/rmrhostsnetrc_root_netrc.$time
		echo "mv $SAVE/rmrhostsnetrc_root_netrc.$time /.netrc" >>$TMP$PID
		undo=1
	fi
fi

if [ $undo -eq 1 ]
then
	time=`date +%s`
	# Create Undo script $SCPTDIR/Undo$2$time
	echo "#!/usr/bin/ksh\nexport PATH=/usr/bin:/usr/sbin:\$PATH\n" >$SCPTDIR/Undo$2$time
	echo "exec 1>>$LOG\nexec 2>&1\nset -x\ndate\necho" '$0' >>$SCPTDIR/Undo$2$time
	cat $TMP$PID >>$SCPTDIR/Undo$2$time
	rm  $TMP$PID
	chmod ug+x $SCPTDIR/Undo$2$time
	
	# Check whether the $UNDOXML file is empty
	empty=`grep "^<AIXPertUndo>" $UNDOXML`
	
	# If empty, add the start and end tags to $UNDOXML
	if [ "$empty" = "" ]
	then
		echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
	fi

	# Get the rulename and put it in undo rule
	name=`echo $AIXPERT_NAME`
	# Get the rule description & pass it to undo rule
	desc=`echo $AIXPERT_DESC`

	# Add an undo XML rule to the file $UNDOXML
	awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>$SCPTDIR/Undo$2$time</AIXPertCommand>\n\
\t\t<AIXPertArgs/>\n\t\t<AIXPertGroup>Remove unauthorized cccess</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;\
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >$TMP$PID
	mv $TMP$PID $UNDOXML
fi

exit 0
