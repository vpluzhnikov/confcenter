#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos610 src/bos/usr/lib/security/aixpert/scripts/chdefstanza.sh 1.3 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2006,2007 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)79	1.3  src/bos/usr/lib/security/aixpert/scripts/chdefstanza.sh, aixpert, bos610 2/3/07 13:17:38
# IBM_PROLOG_END_TAG 
#	COMPONENT_NAME		: (AIXPERT) chdefstanza.sh
#	FUNCTIONS		: None
#	ORIGINS			: 27
#
#	Command Line Arguments  : The script expects 4 command line arguments. 
#				The first argument should be the security
#				configuration stanza file. The second argument
#				should be of the form 'Attr=value', where 
#				'Attr' is any attribute that is defined in the
#				'chsec' command. The third argument should be
#				the stanza where the attribute "Attr" has to
#				be set. The stanza specified should be generic
#				and should not be specific to a user.
#				Otherwise, the script will not work correctly.
#				The fourth argument is optional and should be
#				the rulename.
#
#	Syntax			: chdefstanza file Attr=value stanza [rulename]
#
#	OUTPUT			: None
#
#	Description		: This script changes the attribute 'Attr' to
#				value 'value' in the stanza specified by the
#				third argument of the security configuration
#				stanza file specified by the first argument.
#				The script generates an Undo XML rule when
#				the fourth argument is specified. 
#				This script should be run with superuser
#				privileges.

export PATH=/usr/bin:/usr/sbin:$PATH

# Initialize variables AIXPERT_FIFO, LOG, REPORT and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

TMP=/etc/security/aixpert/tmp/chdefstanza
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if ( [ $# -lt 3 ] || [ $# -gt 4 ] )
then
	dspmsg -s 2 aixpert.cat 1 "Usage :\
 chdefstanza file Attr=value stanza [rulename]\n"
	exit 1
fi

# echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

# This script generates Undo XML rule if the number of arguments is 4,
# otherwise it works as undo script.
if [ $# -eq 4 ]
then

	# Determine the attribute specified in $2
	Attr=` echo $2 | awk -F "=" '{print $1; if(NF!=2) exit 1}'`

	if [ $? -ne 0 ]
	then
		dspmsg -s 2 aixpert.cat 1 "Usage :\
 chdefstanza file Attr=value stanza [rulename]\n"
		exit 1
	fi
	
	# Determine the value of attribute $Attr in $2
	value=`echo $2 | awk -F "=" '{print $2}'`

	# Determine the current value of the attribute 'Attr' in stanza
	# specified by $3 in file $1
	res=`lssec -f $1 -s $3 -a $Attr`
	
	if [ $? -ne 0 ]
	then
		dspmsg -s 2 aixpert.cat 2 "chdefstanza.sh: The arguments\
 to the script are incorrect\n"
		exit 1
	fi

	# Get the current value for the user attribute 'Attr'
	curvalue=`echo $res | awk -F "=" '{print $2}'`

	# Check whether AIXPERT_CHECK_REPORT environment variable is set
	report=`echo $AIXPERT_CHECK_REPORT`

	# Dynamic Security Check
	if [ "$report" = "1" ]
	then
		if [ "$value" != "$curvalue" ]
		then
			dspmsg -s 2 aixpert.cat 3 "chdefstanza.sh: User\
 attribute %s, should have value %s, but it is %s now\n" $Attr $value\
 $curvalue >>$REPORT
			dspmsg -s 2 aixpert.cat 3 "chdefstanza.sh: User\
 attribute %s, should have value %s, but it is %s now\n" $Attr $value\
 $curvalue >>$AIXPERT_FIFO
			exit 1
		else
			exit 0
		fi
	fi

	# If new value $value and current value $curvalue of $Attr is not
	# same then set $Attr to $value and generate undo rule
	if [ "$value" != "$curvalue" ]
	then
		chsec -f $1 -s $3 -a $2 
		
		if [ $? -ne 0 ]
		then
			dspmsg -s 2 aixpert.cat 2 "chdefstanza.sh: The\
 arguments to the script are incorrect\n"
			exit 1
		fi
	fi

	# Undo rule should be generated even when we dont explicitly
	# change any security setting, to ensure undo consistency

	# Check if UNDOXML file has <AIXPertUndo> tag or not
	empty=`grep "^<AIXPertUndo>" $UNDOXML`
	if [ "$empty" = "" ]
	then
		echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
	fi

	# Get the rulename and put it in undo rule
	name=`echo $AIXPERT_NAME`
	# Get the rule description & pass it to undo rule
	desc=`echo $AIXPERT_DESC`

	# Add an undo XML rule to the file $UNDOXML
	awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>/etc/security/aixpert/bin/chdefstanza\
</AIXPertCommand>\n\t\t<AIXPertArgs>$1 $Attr=$curvalue $3</AIXPertArgs>\n\
\t\t<AIXPertGroup>Login policy recommendations</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;\
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >$TMP$PID
	mv $TMP$PID $UNDOXML
else
	chsec -f $1 -s $3 -a $2
	if [ $? -ne 0 ]
	then
		dspmsg -s 2 aixpert.cat 2 "chdefstanza.sh: The arguments\
 to the script are incorrect\n"
		exit 1
	fi
fi

exit 0
