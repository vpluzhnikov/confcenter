#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos61H src/bos/usr/lib/security/aixpert/scripts/chusrattr.sh 1.6 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2006,2009 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)82	1.6  src/bos/usr/lib/security/aixpert/scripts/chusrattr.sh, aixpert, bos61H, 0915A_61H 4/6/09 14:54:57
# IBM_PROLOG_END_TAG 
#	COMPONENT_NAME		: (AIXPERT) chusrattr.sh
#	FUNCTIONS		: None
#	ORIGINS			: 27
#
#	Command Line Arguments	: The script expects 3 command line arguments.
#				The first argument should be of the form
#				'Attr=value', where 'Attr' is an user attribute
#				and 'Attr' can be any attribute that is defined
#				in the 'chuser' command. The second argument
#				should be either 'ALL' or 'NONROOT'.
#				The third argument is optional and if provided,
#				indicates that the undo xml rule has to be
#				generated.
#	Syntax			: chusrattr Attr=value {ALL|NONROOT} [rulename]
#	OUTPUT			: None
#
#	Description		: This script changes the attribute 'Attr' to
#				value 'value' for all users if the second
#				argument is 'ALL' and only for non-root users,
#				when the second argument is 'NONROOT'.
#				This script should be run with superuser
#				privileges. It generates an undo XML rule with
#				shortname as "Undo$3 <timestamp>" if the third
#				argument is provided.

export PATH=/usr/bin:/usr/sbin:$PATH

# Initialize variables AIXPERT_FIFO, LOG, REPORT and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

TMP=/etc/security/aixpert/tmp/chusrattr
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if [ $# -lt 2 ] || [ $# -gt 3 ] ||\
( [ "$2" != "ALL" ] && [ "$2" != "NONROOT" ] )
then
        dspmsg -s 4 aixpert.cat 1 "Usage :\
 chusrattr Attr=value {ALL | NONROOT} [rulename]\n"
        exit 1
fi

# Echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

# A value of 0 indicates that Undo rule need not be created. This variable
# will be set later in the script if there is anything to be undone.
undo=0

# Determine the user attribute that has to be changed.
usrattr=`echo $1 | awk -F "=" '{print $1; if(NF != 2) exit 1}'`

if [ $? -ne 0 ] || [ "$usrattr" = "" ]
then
	dspmsg -s 4 aixpert.cat 1 "Usage :\
 chusrattr Attr=value {ALL | NONROOT} [Rulename]\n"
        exit 1
fi

# Determine the value that is being assigned to the $usrattr
value=`echo $1 | awk -F "=" '{print $2}'`

# This script generates Undo rule if the number of arguments is 3,
# otherwise it works as undo script.
if [ $# -eq 3 ] 
then

	# Determine the current value of $usrattr in the default stanza
	res=`lssec -f /etc/security/user -s default -a $usrattr`
		
	if [ $? -ne 0 ]
	then
		dspmsg -s 4 aixpert.cat 2 "chusrattr.sh: The arguments to the\
 script are incorrect\n"
		exit 1
	fi

	defvalue=`echo $res | awk -F "=" '{print $2}'`
	
	# Check whether AIXPERT_CHECK_REPORT environment variable is set
	report=`echo $AIXPERT_CHECK_REPORT`

	if [ "$report" = "1" ]
	then
		if [ "$value" != "$defvalue" ]
		then
			dspmsg -s 4 aixpert.cat 3 "chusrattr.sh:\
 User attribute %s, should have value %s, but it is %s now\n"\
 $usrattr $value $defvalue >>$REPORT
			dspmsg -s 4 aixpert.cat 3 "chusrattr.sh:\
 User attribute %s, should have value %s, but it is %s now\n"\
 $usrattr $value $defvalue >>$AIXPERT_FIFO
			exit 1
		else
			exit 0
		fi
	fi

	# undo rule should be generated, regardless whether aixpert
	# changes the security setting or not, this is to ensure
	# consistency of undo action
	undo=1

fi

# Set $usrattr to 0 when the $2 is NONROOT
if [ "$2" = "NONROOT" ]
then
	chsec -f /etc/security/user -s root -a $usrattr=0
	if [ $? -ne 0 ]
	then
		dspmsg -s 4 aixpert.cat 2 "chuserstanza.sh: The arguments to\
 the script are incorrect\n"
		exit 1
	fi
fi

# Set $usrattr to 0 for padmin on a vios server when the $2 is NONROOT
if [ "$2" = "NONROOT" ]
then
        /usr/ios/cli/ioscli > /dev/null
        if [ $? -eq 0 ]
        then
                chsec -f /etc/security/user -s padmin -a $usrattr=0
                if [ $? -ne 0 ]
                then
                        dspmsg -s 4 aixpert.cat 2 "chuserstanza.sh: The arguments to\
                the script are incorrect\n"
                        exit 1
                fi
        fi
fi

dispuid | while read user
do
	# Ignore LDAP/NIS user entries
	echo $user | grep ":" >/dev/null 2>&1
	if [ $? -eq 0 ]
	then
		continue;
	fi
        # Ignore padmin in VIOS clients.
        /usr/ios/cli/ioscli > /dev/null
        if [ $? -eq 0 ] ; then
           if [ "$user" = "padmin" ]
           then
             continue;
                   
           fi

        fi   
        if [ "$2" = "ALL" ] || [ "$user" != "root" ] 
        then
        	      chsec -f /etc/security/user -s $user -a $usrattr=
        	        if [ $? -ne 0 ]
		        then
			dspmsg -s 4 aixpert.cat 2 "chuserstanza.sh:\
 The arguments to the script are incorrect\n"
			exit 1
		       fi
        fi
        
done

# Set the attribute in the default stanza.
# This is needed when new users are created later
chsec -f /etc/security/user -s default -a $1

if [ $? -ne 0 ]
then
	dspmsg -s 4 aixpert.cat 2 "chuserstanza.sh: The arguments to the\
 script are incorrect\n"
	exit 1
fi

if [ $undo -eq 1 ]
then
	# Check if UNDOXML file has <AIXPertUndo> tag or not
	empty=`grep "^<AIXPertUndo>" $UNDOXML`
	if [ "$empty" = "" ]
	then
		echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
	fi

	# Get the rulename and put it in undo rule
	name=`echo $AIXPERT_NAME`

	# Get the rule description & pass it to undo rule
	desc=`echo $AIXPERT_DESC`

	# Add an undo XML rule to the file $UNDOXML
	awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>/etc/security/aixpert/bin/chusrattr\
</AIXPertCommand>\n\t\t<AIXPertArgs>$usrattr=$defvalue ALL</AIXPertArgs>\n\
\t\t<AIXPertGroup>Password policy rules</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;\
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >$TMP$PID
	mv $TMP$PID $UNDOXML
fi
exit 0
