#!/usr/bin/ksh
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# bos610 src/bos/usr/lib/security/aixpert/scripts/ipsecnosynhls.sh 1.3 
#  
# Licensed Materials - Property of IBM 
#  
# Restricted Materials of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2006,2007 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# @(#)90	1.3  src/bos/usr/lib/security/aixpert/scripts/ipsecnosynhls.sh, aixpert, bos610 2/3/07 13:17:47
# IBM_PROLOG_END_TAG 
#	COMPONENT_NAME		: (AIXPERT) ipsecnosynhls.sh
#	FUNCTIONS		: None
#	ORIGINS			: 27
#
#	Command Line Arguments	: This script expects one command line argument.
#				  Syntax: ipsecnosynhls rulename
#
#	OUTPUT			: None
#
#	Description		: This script creates a new filter rule to deny
#				all SYN packets except on the open and listening ports.
#				It dynamically generates undo xml rule.
#				This script should be run with superuser privileges.

export PATH=/usr/bin:/usr/sbin:$PATH

# Initialize variables AIXPERT_FIFO, LOG, REPORT, SCPTDIR and UNDOXML
. /etc/security/aixpert/bin/initialize_variables

TMP=/etc/security/aixpert/tmp/ipsecnosynhls
PID=$$

# Log output and errors to /etc/security/aixpert/log/aixpert.log
exec 1>>$LOG
exec 2>&1

if [ $# -ne 1 ]
then
	dspmsg -s 11 aixpert.cat 1 "Usage: ipsecnosynhls rulename\n"
	exit 1
fi

report=`echo $AIXPERT_CHECK_REPORT`
if [ "$report" = "1" ]
then
	exit 0
fi

# echo all the commands and the current time and date to the AIXpert log
set -x
date
echo $0

# Get the list of open ports in LISTEN mode on all the interfaces
openports=$(netstat -an|grep -i listen|awk '{if (match($4,"\\*\.") != 0)\
 {gsub("\\*\.","",$4); print $4}}')

# Get the ports in listen mode, which are open on few interfaces
hostopenports=$(netstat -an|grep -i listen|awk '{if (match($4,"\\*\.") == 0)\
 { print $4}}')

# Get the source ip(version 4) address of the host, sometimes this address
# might have more than one entry, when we have multiple interfaces
hostipv4=`ifconfig -a|grep "inet "|awk '{print $2}'|grep -v -w "127.0.0.1"`

# Get the source ip(version 6) address of the host
hostipv6=`ifconfig -a|grep "inet6 "|awk '{print $2}'|awk -F "/" '{print $1}'|\
awk -F "%" '{print $1}'|grep -v -w "::1"`

# A value of 0 indicates that Undo rule need not be created. This variable
# will be set later in the script if there is anything to be undone
undo=0

# Generate permit filter rules for the open and listening ports and for all
# interface addressses. All these filter rules will be added to the end of
# the filter rule table
for i in ${openports}
do
	# Add filters for IPv4 to allow traffic on open and listening ports
	for j in ${hostipv4}
	do
		genfilt -v4 -a P -s 0.0.0.0 -m 0.0.0.0 -d $j\
 -M 255.255.255.255 -O eq -P $i -w I -D "AIXpert:IPv4:NoSyn$i$j"
		if [ $? -ne 0 ]
		then
			dspmsg -s 11 aixpert.cat 2 "ipsecnosynhls.sh:\
 genfilt failed to add filter for IPSec Version 4\n"
			exit 1
		fi
		undo=1
	done
	# Add filters for IPv6 to allow traffic on open and listening ports
	for j in ${hostipv6}
	do
		genfilt -v6 -a P -s 0:0:0:0:0:0:0:0 -m 0 -d $j\
 -M 128 -O eq -P $i -w I -D "AIXpert:IPv6:NoSyn$i$j"
		if [ $? -ne 0 ]
		then
			dspmsg -s 11 aixpert.cat 3 "ipsecnosynhls.sh:\
 genfilt failed to add filter for IPSec Version 6\n"
			exit 1
		fi
		undo=1
	done
done

# Permit traffic to ports which are open only on some specific interfaces.
# These filters allow traffic to the specified interface, instead of all interfaces
for i in ${hostopenports}
do
	hst=`echo $i|awk -F "." '{for (x=1;x<NF;x++) addr=addr$x"."}\
 END{print addr}'|awk '{gsub("\.$","",$0);print $0}'`
	prt=`echo $i|awk -F "." '{print $NF}'`
	if [ -n "$hst" ] && [ -n "$prt" ]
	then
		echo $hst|grep ":"
		if [ $? -ne 0 ]
		then
			for j in ${hostipv4}
			do
				genfilt -v4 -a P -s $hst -m 255.255.255.255 -d $j\
 -M 255.255.255.255 -O eq -P $prt -w I -D "AIXpert:IPv4:NoSyn$hst$j"
				if [ $? -ne 0 ]
				then
					dspmsg -s 11 aixpert.cat 2 "ipsecnosynhls.sh:\
 genfilt failed to add filter for IPSec Version 4\n"
					exit 1
				fi
				undo=1
			done
		else
			for j in ${hostipv6}
			do
				genfilt -v6 -a P -s $hst -m 128 -d $j\
 -M 128 -O eq -P $prt -w I -D "AIXpert:IPv4:NoSyn$hst$j"
 				if [ $? -ne 0 ]
				then
					dspmsg -s 11 aixpert.cat 3 "ipsecnosynhls.sh:\
 genfilt failed to add filter for IPSec Version 4\n"
					exit 1
				fi
				undo=1
			done
		fi
	fi
done

# Deny all other IPv4 packets except the packets for open listen ports on all interfaces
# All these filter rules will be added to the end of the filter rule table
for k in ${hostipv4}
do
	# Add filters for IPv4 to deny traffic on ports other than open and listening ports
	genfilt -v4 -a D -s 0.0.0.0 -m 0.0.0.0 -d $k\
 -M 255.255.255.255 -O any -P 0 -w I -D "AIXpert:IPv4:NoSyn$k"
	if [ $? -ne 0 ]
	then
		dspmsg -s 11 aixpert.cat 2 "ipsecnosynhls.sh:\
 genfilt failed to add filter for IPSec Version 4\n"
		exit 1
	fi
	undo=1
done

# Activate the IPSec v4 filters added.
mkfilt -v4 -u
if [ $? -ne 0 ]
then
	dspmsg -s 11 aixpert.cat 4 "ipsecnosynhls.sh:\
 mkfilt failed to activate filter rules for IPSec Version 4\n"
	exit 1
fi

# Deny all other IPv6 packets except the packets for open listen ports on all interfaces
# All these filter rules will be added to the end of the filter rule table
for k in ${hostipv6}
do
	# Add filters for IPv6 to deny traffic on ports other than open and listening ports
	genfilt -v6 -a D -s 0:0:0:0:0:0:0:0 -m 0 -d $k\
 -M 128 -O any -P 0 -w I -D "AIXpert:IPv6:NoSyn$k"
	if [ $? -ne 0 ]
	then
		dspmsg -s 11 aixpert.cat 3 "ipsecnosynhls.sh:\
 genfilt failed to add filter for IPSec Version 6\n"
		exit 1
	fi
	undo=1
done

# Activate the IPSec v6 filters added.
mkfilt -v6 -u
if [ $? -ne 0 ]
then
	dspmsg -s 11 aixpert.cat 5 "ipsecnosynhls.sh:\
 mkfilt failed to activate filter rules for IPSec Version 6\n"
	exit 1
fi

if [ $undo -eq 1 ]
then
	# Check if UNDOXML file has <AIXPertUndo> tag or not
	empty=`grep "^<AIXPertUndo>" $UNDOXML`
	if [ "$empty" = "" ]
	then
		echo "\n<AIXPertUndo>\n</AIXPertUndo>" >> $UNDOXML
	fi

	# Get the rulename and put it in undo rule
	name=`echo $AIXPERT_NAME`
	# Get the rule description & pass it to undo rule
	desc=`echo $AIXPERT_DESC`

	# Add an undo XML rule to the file $UNDOXML
	awk -v rulehalf1="\t<AIXPertEntry name=\"$name\">\n\
\t\t<AIXPertRuleType type=\"Undo\"/>\n\
\t\t<AIXPertDescription>Undo action for \"$desc\"</AIXPertDescription>\n\
\t\t<AIXPertPrereqList/>\n"\
 -v rulehalf2="\t\t<AIXPertCommand>/etc/security/aixpert/bin/ipsecundo\
</AIXPertCommand>\n\t\t<AIXPertArgs>NoSyn</AIXPertArgs>\n\
\t\t<AIXPertGroup>IPSec Filter Rules</AIXPertGroup>\n\
\t</AIXPertEntry>" '{if(match($0,"^[\t ]*</AIXPertUndo>")==0) print $0;\
 else print rulehalf1 rulehalf2 "\n" $0}' $UNDOXML >>$TMP$PID
	mv $TMP$PID $UNDOXML
fi

exit 0
