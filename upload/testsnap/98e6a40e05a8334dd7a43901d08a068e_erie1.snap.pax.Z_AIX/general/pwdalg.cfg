*******************************************************************************
*
* Loadable Password Algorithm (LPA)
* 
* The format of a LPA stanza is:
*
* lpa:
* 	lpa_module = /any/program
*	lpa_options = options_list
*
* lpa 		Corresponds to a password hashing algorithm that can be 
*		specified in the "usw" stanza of /etc/security/login.cfg 
*		as the system-wide password hashing algorithm.
* 
* lpa_module	Specifies the path of the password hashing load module. 
* 		In the above example, /any/program is the path to the load 
*		module that is used to do the password hashing in 32 bit 
*		mode. The load module that is used to run in 64 bit mode 
*		is /any/program_64.
*
* lpa_options	Is an optional attribute that provides a means of 
*		communicating run-time configuration options to the load 
*		module. The value is a comma separated list of items. 
*		Please refer to the documentation for the load module for 
*		appropriate values.
*
*******************************************************************************
* 
* /usr/lib/security/smd5 is a password hashing load module using
* the MD5 algorithm. 
*
* It supports password length up to 255 characters.
*
* To generate smd5 password hash compatible to standard salted MD5,
* add the following option line for smd5 stanza. 
*	lpa_options = std_hash=true
*
* Note : password hash generated with this option won't be compatible with 
* hash generated without this option.
*
*******************************************************************************
smd5:
	lpa_module = /usr/lib/security/smd5

*******************************************************************************
*
* /usr/lib/security/ssha is a password hashing load module using SHA and
* SHA2 algorithms. It supports password length up to 255 characters.
*
* This LPA accepts three options. The options are separated by commas. 
*
* The first option is:
*	algorithm=alg_name
*
* 	The valid values for alg_name are:
*		sha1	: Using SHA1 algorithm. This is the default value.
*		sha256	: Using SHA256 algorithm.
*		sha512	: Using SHA512 algorithm.
*
* The second option is:
*	cost_num=cost
*
*	The default hashing iterations is 2^cost. The valid value of cost is
*	an integer between 4 and 31, inclusive. The default cost value is 6.
*
* The third option is:
*	salt_len=salt
*
*	The default salt length can be passed in to this LPA using this option.
*	The valid value of salt is an integer between 8 and 24, inclusive. 
*	The default cost value is 16.
*
* For example, the following stanza defines SHA512 as hashing
* algorithm with default cost of 10 and default salt length of 24:
*
* mysha:
*	lpa_module = /usr/lib/security/ssha
*	lpa_options = algorithm=sha512,cost_num=10,salt_len=24
*
*******************************************************************************
ssha1:
	lpa_module = /usr/lib/security/ssha
	lpa_options = algorithm=sha1

ssha256:
	lpa_module = /usr/lib/security/ssha
	lpa_options = algorithm=sha256

ssha512:
	lpa_module = /usr/lib/security/ssha
	lpa_options = algorithm=sha512

*******************************************************************************
*
* /usr/lib/security/sblowfish is a password hashing load module using 
* Blowfish algorithm. It supports password length up to 72 characters.
* The salt length used in this LPA is 22.
*
* This LPA accepts one option.  The option is:
*	cost_num=cost
*
*	The default hashing iterations is 2^cost. The valid value of cost is
*	an integer between 4 and 31, inclusive. The default cost value is 8.
*
* For example, the following stanza uses default cost of 10.
*
* mybf:
*	lpa_module = /usr/lib/security/sblowfish
*	lpa_options = cost_num=10
*
*******************************************************************************
sblowfish:
	lpa_module = /usr/lib/security/sblowfish
